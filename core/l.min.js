/**
* @preserve ====================================================================
* Copyright 1997, 2021. Proiecto, C. A. Todos los derechos reservados.
* Proiecto, Proiecto BackOffice, Proiecto BackOffice Server, Proiecto Salomón
* y Proiecto Web Services, son marcas registradas de Proiecto, C. A.
* El eslogan: 'Plataforma de servicios en la nube', es marca registrada de
* Proiecto, C. A. Otros productos citados son marcas registradas de sus
* respectivos propietarios y/o fabricantes.
* Producto desarrollado por Edward Ocando con licencia para uso exclusivo de
* Proiecto, C. A. Para más información visite https://www.proiecto.net, ó 
* si lo desea, puede escribir a: 
* info@proiecto.net, ventas@proiecto.net ó soporte@proiecto.net
* ====================================================================
* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* ====================================================================
*/
"use strict";

// Algunos campos para ser mostrados correctamente deben
// tener la clase CCS "preTranslate"
// y son mostrados exclusivamente en el window.on.load.js
// <h5 id='spanNombreServicio' class='preTranslate'>...</h5>

// <h3 data-translate="1">Soy un Hx</h3>
// <span data-translate="2">Soy un span</span> 
// <p data-translate="3">Soy un parrafo</p>
// <label data-translate="4">Soy una etiqueta</label>
// <textarea data-translate="5">Soy unn area de texto</textarea>
// <legend data-translate="6">Soy una leyenda</legend>
// <button data-translate="7" type="button">Soy un boton</button>
// <input data-translate="CONTRASENA" type="password" placeholder="[CONTRASENA]">
// <span data-translate="0">{{*}}</span>
// <span class='fontProiecto' data-translate="PROIECTO">[PROIECTO]</span>
// <a href="#">
//      <span data-translate="...">[...]</span>
// </a>

// =============================================================
// Variable GLOBAL que contendrá el JSON con todos los string del idioma activo...
// =============================================================
var $GlobalJsonDiccionary = {};
// =============================================================

// =============================================================
//
// =============================================================
function lClear() {
    // Vaciar las dos (02) variables globales relacionadas al idioma
    $GlobalJsonDiccionary = {};
    localStorage.removeItem('langId');
    localStorage.removeItem('jsonDiccionary');
    return true;
};
// =============================================================

// =============================================================
//
// =============================================================
function lGet() {
    // Si no hay idioma, se toma del navegador
    // buscando en $myArr, si no se encuentra en el arreglo
    // se deja el predeterminado ("es")
    if(!localStorage.getItem('langId')) {
        let $tmpLang = $BCL.getNavigatorLanguage(); // 'es', 'en', 'de', 'fr', 'it', 'pt', 'ru', 'jp', 'kr', 'zh'

        // la lista depende de los archivos .json ubicados en /core/lang
        let $myArr = ['es', 'en', 'de', 'fr', 'it', 'pt', 'ru', 'jp', 'kr', 'zh'];
        //      'es' --> Español
        //      'en' --> English
        //      'de' --> Deutsch
        //      'fr' --> Français
        //      'it' --> Italiano
        //      'pt' --> Português (Brasil)
        //      'ru' --> русский
        //      'jp' --> 日本語
        //      'kr' --> 한국어
        //      'zh' --> 简体中文 (Chino simplificado)

        if(($myArr.indexOf($tmpLang) > -1)) {
            localStorage.setItem('langId', $tmpLang);
        } else {
            localStorage.setItem('langId', 'es');
        }
    };
    return localStorage.getItem('langId');
};

// =============================================================
// Setear variables a un idioma especifico....
// =============================================================
function lSet(langId) { // 'es', 'en', 'de', 'fr', 'it', 'pt', 'ru', 'jp', 'kr', 'zh'

    // =============================================================
    // https://www.w3schools.com/charsets/ref_utf_math.asp
    // https://www.w3schools.com/charsets/ref_utf_symbols.asp
    // =============================================================
    $("body").mask('&#10159; &#9749;'); 
    $BCL.wait(300);
    // =============================================================
    
    var x0 = lClear();
    localStorage.setItem('langId', langId);
    var x1 = prepareLang(langId);

    // =============================================================
    $("body").unmask();
    // =============================================================
};
// =============================================================

// =============================================================
// Prepara el diccionario y lo carga en 
// memoria (localStorage --> jsonDiccionary)
// =============================================================
function prepareLang(langId) {
    // langId --> localStorage.getItem('langId') --> 'es', 'en', 'de', 'fr', 'it', 'pt', 'ru', 'jp', 'kr', 'zh'

    // eliminar cualquier diccicionario previo
    localStorage.removeItem('jsonDiccionary');

    // Archivo con las definiciones de textos traducidas de acuerdo al lenguaje...
    let jSonFile = "/core/lang/" + langId + ".json";
    //      core/lang/en.json // Ingles
    //      core/lang/es.json // Español
    //      core/lang/fr.json // Frances
    //      core/lang/jp.json // Japones
    //      core/lang/de.json // Aleman
    //      core/lang/it.json // Italiano
    //      core/lang/ru.json // Ruso
    //      core/lang/zh.json // Chino simplificado
    //      core/lang/kr.json // Koreano
    //      core/lang/pt.json // Português (Brasil)
    // if($appConfig.esModoDebug) { console.log(jSonFile + " loaded.") };

    // Objeto donde se almacena el diccionario
    // de idomas global, para evitar
    // problema de sincronismo en $.getJSON(...)

    var jSonLang = JSON.stringify($BCL.loadJsonFile(jSonFile)); // Retardo por AJAX sincrónico
    localStorage.setItem("jsonDiccionary", jSonLang);

    // $GlobalJsonDiccionary es un objeto JSON, no un Array de JS.
    $GlobalJsonDiccionary = {};
    $GlobalJsonDiccionary = JSON.parse(localStorage.getItem("jsonDiccionary"));

    return true;
};
// =============================================================


// =============================================================
// let $tmp = l(idText);
// =============================================================
function l(idText) {
    // Obtener longitud del objeto JSON (no es un Array de JS)
    let jsonCount = Object.keys($GlobalJsonDiccionary).length;

    if(jsonCount === 0) {
        lSet(lGet());
    };

    let result = $GlobalJsonDiccionary[idText];
    // si no se encuentra valor, regresarlo el titulo
    if(typeof result === "undefined") {
        return "[" + idText + "]";
    } else {
        return $GlobalJsonDiccionary[idText];
    }
};
// =============================================================

// =============================================================
// Traducir el DOM
// let $tmpLng = traduceDOM();
// =============================================================
function traduceDOM() {

    if(!localStorage.getItem('langId')) {
        lSet(lGet());
    };

    $.when(
            translateHtmlTags(),
            translatePlaceHolders(),
            translateAssets()
        )
        .then(function() {
            return true;
        });
    return false;
};
// =============================================================


// =============================================================
//
// =============================================================
function translateHtmlTags() {
    $("[data-translate]").each(function() {
        let key = $(this).data('translate');
        $(this).html(l(key));
    });
};
// =============================================================

// =============================================================
//
// =============================================================
function translatePlaceHolders() {
    // Inputs placeholder
    // <input type="password" placeholder="[CONTRASENA]" data-translate="CONTRASENA">

    // Change placeholder text
    // JS -->       document.getElementsByName('Email')[0].placeholder='new text for email';
    //              document.getElementById("myText").placeholder = "Type name here..";
    // jQUERY -->   $('input:text').attr('placeholder','Some New Text'); // (for all inputs)
    //              $('#element_id').attr('placeholder','Some New Text');
    //              $('.select-holder')[0].placeholder = "This is my new text";
    //

    // Get the placeholder text of a text field:
    // let x = document.getElementById("myText").placeholder;

    $("input").each(function() {
        // if (typeof $(this).attr('placeholder') === "undefined"){
        if(typeof $(this).attr('data-translate') === "undefined") {
            // alert($(this).attr('placeholder'));
            // alert($(this).attr('data-translate'));
        } else {
            // var key = $(this).attr('placeholder');
            var key = $(this).attr('data-translate');
            $(this).attr('placeholder', l(key));
        }
    });
};
// =============================================================

// =============================================================
//
// =============================================================
function translateAssets() {
    // =====================================================
    // activar lenguaje para el JQUERY-UI DatePiker
    // ToDo: Hacer lo mismo para otros idiomas
    // if (localStorage.getItem('langId') === "..")
    // =====================================================
    if(localStorage.getItem('langId') === "es") {

        // Para evitar error cargar jQueryUI primero...
        $.datepicker.regional['es'] = {
            closeText: "Cerrar",
            prevText: "&#x3C;Ant",
            nextText: "Sig&#x3E;",
            currentText: "Hoy",
            monthNames: ["enero", "febrero", "marzo", "abril", "mayo", "junio",
                "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"
            ],
            monthNamesShort: ["ene", "feb", "mar", "abr", "may", "jun",
                "jul", "ago", "sep", "oct", "nov", "dic"
            ],
            dayNames: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
            dayNamesShort: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
            dayNamesMin: ["D", "L", "M", "X", "J", "V", "S"],
            weekHeader: "Sm",
            dateFormat: "dd/mm/yy",
            firstDay: 1,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ""
        };
        $.datepicker.setDefaults($.datepicker.regional['es']);
    } else {
        // valor por defecto EN
        $.datepicker.setDefaults($.datepicker.regional[""]);
    }

    // =====================================================
    // -> DataTable
    // Ejecutar esta parte solo en index.html principal.
    // =====================================================
    /*
        if (localStorage.getItem('langId') === "es") {
            $.extend($.fn.dataTable.defaults, { language: { url: "/assets/plugins/DataTables/lang/spanish.json" } });
        };
    */
    // Todo Hacer lo mismo para los otros idiomas y buscar la forma de refrescar la tabla

    // =====================================================
    // -> /assets/plugins/balloonCSS/balloon.min.css
    // <span aria-label='[XXX]' data-balloon-pos='left'>...</span>
    // =====================================================
    $("[aria-label]").each(function() {
        let key = $(this).attr('data-translate');
        let ariaLabel = l(key);

        // alert(key);
        // alert(l(key));

        // Para evitar conflicto en: /assets/plugins/balloonCSS
        if(ariaLabel.substring(0, 1) == '[') {
            // ....
        } else {
            $(this).attr('aria-label', ariaLabel)
        }

    })
};
// =============================================================
