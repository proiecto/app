/**
* @preserve ====================================================================
* Copyright 1997, 2021. Proiecto, C. A. Todos los derechos reservados.
* Proiecto, Proiecto BackOffice, Proiecto BackOffice Server, Proiecto Salomón
* y Proiecto Web Services, son marcas registradas de Proiecto, C. A.
* El eslogan: 'Plataforma de servicios en la nube', es marca registrada de
* Proiecto, C. A. Otros productos citados son marcas registradas de sus
* respectivos propietarios y/o fabricantes.
* Producto desarrollado por Edward Ocando con licencia para uso exclusivo de
* Proiecto, C. A. Para más información visite https://www.proiecto.net, ó 
* si lo desea, puede escribir a: 
* info@proiecto.net, ventas@proiecto.net ó soporte@proiecto.net
* ====================================================================
* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* ====================================================================
*/
"use strict";

// ============================================================
// AJAX GLOBAL
// ============================================================
// async (por defecto: true): 
// Por defecto todas las peticiones son configuradas para 
// que sean asíncronas; lo que significa que el resto del JavaScript 
// sigue ejecutándose sin importar si termino de procesar la petición.
// En modo síncrono (async: false) la petición al servidor se realizaría de uno
// En modo asíncrono (async: true) la petición al servidor se realizaría de manera paralela
// $.ajaxSetup should be set before other Ajax calls.
//  jQuery.ajaxSetup({async:false});
//      Call -> async: false
//  jQuery.ajaxSetup({async:true});
$.ajaxSetup({
    cache: false,
    timeout: $appConfig.ajaxCallTimeOut,
    headers: {
            'Accept-Token': $sessionToken.sesionUID, 
            'Content-Type': 'application/json',
            'X-Powered-By': 'PROIECTO',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': '*',
            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS'
  },
});


// Global AJAX Functions
// jQuery has a set of global AJAX functions which you can use to listen for AJAX events across all AJAX requests sent via jQuery. These global AJAX functions are:

//    .ajaxSend() // Notice that the ajaxSend() is called on a jQuery selection object. 
//    .ajaxStart()
//    .ajaxStop()
//    .ajaxSuccess()
//    .ajaxError()
//    .ajaxComplete()



// ============================================================
// Barra de proceso en background
// ============================================================
// Para pasar por alto en un $.ajax({ ... }) especifico
// asignar -> global: false
$(document).on("ajaxStart", function() {
    topbar.show();
}).on("ajaxStop", function() {
    topbar.hide();
});
// ============================================================

// ============================================================
// Whenever an Ajax request completes, jQuery triggers the ajaxComplete event. 
// Any and all handlers that have been registered with the .ajaxComplete() 
// method are executed at this time.
// If $.ajax() or $.ajaxSetup() is called with the global option set to false, the .ajaxComplete() method will not fire.
// ============================================================
$(document).ajaxComplete(function(event, xhr, settings) {
    // Note: You can get the returned Ajax contents by looking at xhr.responseText
    if(settings.url === "[ANY-URL-TO-WEB-SERVICE]") {
        console.log("Triggered ajaxComplete handler. The result is " + xhr.responseText);
    }
});
// ============================================================


// ============================================================
// Aviso cuando curre un erro en jQuery $ajax
// ============================================================
// USO
//     error: function(jqXHR, textStatus, errorThrown) {
//         var xResult = jQueryAjaxAvisoError('Ajax Response status: ' + textStatus);
//     }
// ============================================================
function jQueryAjaxAvisoError(param) {
    // ============================================================
    // No notificar si ya hay un aviso en pantalla
    // ============================================================
    if($alertaAvisoActivo) { return false; };
    $alertaAvisoActivo = true;
    // ============================================================

    var errorTitle = l('AVISO_AJAX_ERROR_GENERAL_TITULO');

    var xParam = '';
    if(param){xParam = '<p style="padding-top:8px;padding-left:8px"><b>' + param + '</b></p>'};

    $.alert({
        boxWidth: '90%',
        useBootstrap: false,
        // columnClass: 'small' // default        
        // Available animations:
        // right, left, bottom, top, rotate, none, opacity, scale, zoom,
        // scaleY, scaleX, rotateY, rotateYR (reverse), rotateX, rotateXR (reverse)
        animation: 'opacity',
        closeAnimation: 'scale',
        animationBounce: 2, // default is 1.2 whereas 1 is no bounce.
        escapeKey: false,
        // titleClass: '',
        // typeAnimated: true,
        closeIcon: false,
        // closeIconClass: 'fa fa-close',
        draggable: true,
        type: 'red',
        icon: 'fa fa-hand-stop-o',
        title: errorTitle,
        dragWindowGap: 100,
        content: l('AVISO_AJAX_ERROR_GENERAL') + xParam,
        onDestroy: function() {
            $alertaAvisoActivo = false;
            return true;
        }
    });
};
// ============================================================


if($BCL.getBrowserName() === "unknown") {
    document.location.href = "/pages/customErrors/AgentUnknown.html";
};

if(!$BCL.isLocalStorage()) {
    document.location.href = "/pages/customErrors/NoLocalStorage.html";
};

if(!$BCL.isSessionStorage()) {
    document.location.href = "/pages/customErrors/NoLocalStorage.html";
};

if(!$BCL.isCookie()) {
    document.location.href = "/pages/customErrors/NoCookie.html";
};

// ============================================================
// Web Workers Support
// Los Web Workers dedicados proveen un medio sencillo para que el contenido 
// web ejecute scripts en hilos en segundo plano. Una vez creado, un worker 
// puede enviar mensajes a la tarea creada mediante envio de mensajes al 
// manejador de eventos especificado por el creador. Sin embargo, los workers 
// trabajan dentro de un contexto global diferente de la ventana actual 
// (usar el atajo  window en lugar de self con el fin de obtener el scope 
// actual dentro de un Worker retornaría, de hecho, un error).
// El hilo worker puede realizar tareas sin interferir con la interfaz 
// de usuario. Ademas, pueden realizar I/O usando XMLHttpRequest 
// (aunque el responseXML y los atributos channel son siempre null).
// ============================================================
if(typeof(Worker) === 'undefined') {
    document.location.href = "/pages/customErrors/NoWorker.html";
};

// ============================================================
//  Geolocation Support
//  Navigator.geolocation devuelve un objeto Geolocation que proporciona acceso web 
//  a la ubicación de un dispositivo. Esto permite ofrecer al sitio web o aplicación 
//  resultados personalizados basados en la ubicación del usuario.
// ============================================================
if(!navigator.geolocation) {
    document.location.href = "/pages/customErrors/NoGeolocation.html";
};


// Check for the various File API support.
if(window.File && window.FileReader && window.FileList && window.Blob) {
    // Great success! All the File APIs are supported.
} else {
    alert('The File APIs are not fully supported in this browser.');
}
