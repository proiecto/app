/**
 * @preserve ====================================================================
 * Copyright 1997, 2021. Proiecto, C. A. Todos los derechos reservados.
 * Proiecto, Proiecto BackOffice, Proiecto BackOffice Server, Proiecto Salomón
 * y Proiecto Web Services, son marcas registradas de Proiecto, C. A.
 * El eslogan: 'Plataforma de servicios en la nube', es marca registrada de
 * Proiecto, C. A. Otros productos citados son marcas registradas de sus
 * respectivos propietarios y/o fabricantes.
 * Producto desarrollado por Edward Ocando con licencia para uso exclusivo de
 * Proiecto, C. A. Para más información visite https://www.proiecto.net, ó 
 * si lo desea, puede escribir a: 
 * info@proiecto.net, ventas@proiecto.net ó soporte@proiecto.net
 * ====================================================================
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
"use strict";

// <script type='text/javascript' src='//demo.proiecto.net/core/bcl.min.js?v=7.13'></script>

// ============================== $BCL ==============================
if(typeof $BCL === "undefined" || !$BCL) {
	var $BCL = {};
};
// if(!$BCL){console.error('Topper requires BCL in order to work.');}
// ============================== $BCL ==============================


function RemoveAccents(WordWithoutAccents) {

	WordWithoutAccents = WordWithoutAccents.replace('á', 'a');
	WordWithoutAccents = WordWithoutAccents.replace('é', 'e');
	WordWithoutAccents = WordWithoutAccents.replace('í', 'i');
	WordWithoutAccents = WordWithoutAccents.replace('ó', 'o');
	WordWithoutAccents = WordWithoutAccents.replace('ú', 'u');
	WordWithoutAccents = WordWithoutAccents.replace('ñ', 'n');
	WordWithoutAccents = WordWithoutAccents.replace('Ñ', 'N');

	return WordWithoutAccents;
}



function capitalize(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}




// ================================================
// Implementar...
// ================================================
// https://medium.com/@angela.amarapala/difference-between-arrays-and-json-objects-fa1c8598f9f1
// https://www.cloudhadoop.com/2019/07/javascript-array-vs-json-vs-object.html
//
// ARRAY 	--> [1,2,3]
// OBJECT --> {"foo":"bar"} 
//	var obj = {};
//	var obj = {firstname : "Hiral", lastname : "Patel"};
//	obj.firstname; // returns hiral
//	typeof obj; // outputs object.
//	Object.keys(obj).length; // returns 1
//	obj.hasOwnProperty("firstname"); // returns true;
//   obj.hasOwnProperty("dummy"); // returns false;
//
// ARRAY OF OBJECTS
//	var arr = [];
//	Array.isArray(arr); // outputs true
//
//	var mylist = [
//	  			{"record_id":1, "name":"Frank"},
//	  			{"record_id":2, "name":"Sally"}
//			   ];
//	mylist[0].name --> "Frank"
//	mylist[1].name --> "Sally"
//
// 	JSON - JSON Objects are enclosed within {}
// 	Array
// 	var arr = ["one", "two", "three", "four"];
//
// 	get JSON string from array.
// 	var jsonStrofArray = JSON.stringify(arr); // returns json string of "["one","two","three","four"]"
//
// 	Recover array from JSON string
// 	var arrFromJSONString = JSON.parse(jsonStrofArray); // Returns ["one", "two", "three", "four"]
//
// 	Objects
// 	var obj = {firstname:"hiral", lastname: "patel"};
//
// 	get json string from object
// 	var jsonStrofObj = JSON.stringify(obj); // returns json string of "{"firstname":"hiral","lastname":"patel"}"
//
// 	Recover object from JSON string
// 	var objFromJSONString = JSON.parse(jsonStrofObj); 
// 	Returns json object with keys of firstname and lastname along with values.
// ================================================


$BCL.monthsEn = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
$BCL.monthsEs = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];
$BCL.daysEn = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
$BCL.daysEs = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado', 'domingo'];

$BCL.daysDe = [];
$BCL.monthsDe = [];

$BCL.daysFr = [];
$BCL.monthsFr = [];

$BCL.daysIt = [];
$BCL.monthsIt = [];

$BCL.daysJp = [];
$BCL.monthsJp = [];

$BCL.daysKr = [];
$BCL.monthsKr = [];

$BCL.daysPt = [];
$BCL.monthsPt = [];

$BCL.daysRu = [];
$BCL.monthsRu = [];

$BCL.daysZh = [];
$BCL.monthsZh = [];
// ================================================

// ================================================
// For jQuery - RTM NOT CHANGE
// ================================================
// En las funciones que usan jQuery
$BCL.$isjQuery = function() {
	return !(typeof(jQuery) == 'undefined');
};
$BCL.$isjQueryUI = function() {
	if($BCL.$isjQuery()) {
		// No Work
		// 	if(typeof jQuery.ui == 'undefined'){console.log("no")}
		// 	if(jQuery.ui){console.log("no")}
		// OK
		if(typeof $.ui !== 'undefined') {
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
// ================================================

// ================================================
// Limpiar cache de la pagina - RTM NOT CHANGE
// ================================================
$BCL.clearCache = function(deleteCookies) {
	// Evitar perder idioma activo de Proiecto
	var $tmpLang = 'es'; // idioma por defecto
	if(localStorage.getItem('langId')) {
		$tmpLang = localStorage.getItem('langId');
	};

	sessionStorage.clear();
	localStorage.clear();

	window.localStorage.clear();
	window.sessionStorage.clear();

	if(deleteCookies) {
		$BCL.deleteCookieAll();
	};

	// Recuperar idioma activo de Proiecto
	localStorage.setItem('langId', $tmpLang);
	// ================================================
};
// ================================================

// ================================================
// Lenguaje del navegador (es, en)
// ================================================
$BCL.getNavigatorLanguage = function() { // PRODUCTION OK
	// ["af", "sq", "ar-SA", "ar-IQ", "ar-EG", "ar-LY", "ar-DZ", "ar-MA", "ar-TN", "ar-OM",
	//  "ar-YE", "ar-SY", "ar-JO", "ar-LB", "ar-KW", "ar-AE", "ar-BH", "ar-QA", "eu", "bg",
	//  "be", "ca", "zh-TW", "zh-CN", "zh-HK", "zh-SG", "hr", "cs", "da", "nl", "nl-BE", "en",
	//  "en-US", "en-EG", "en-AU", "en-GB", "en-CA", "en-NZ", "en-IE", "en-ZA", "en-JM",
	//  "en-BZ", "en-TT", "et", "fo", "fa", "fi", "fr", "fr-BE", "fr-CA", "fr-CH", "fr-LU",
	//  "gd", "gd-IE", "de", "de-CH", "de-AT", "de-LU", "de-LI", "el", "he", "hi", "hu", 
	//  "is", "id", "it", "it-CH", "ja", "ko", "lv", "lt", "mk", "mt", "no", "pl",
	//  "pt-BR", "pt", "rm", "ro", "ro-MO", "ru", "ru-MI", "sz", "sr", "sk", "sl", "sb",
	//  "es", "es-AR", "es-GT", "es-CR", "es-PA", "es-DO", "es-MX", "es-VE", "es-CO", 
	//  "es-PE", "es-EC", "es-CL", "es-UY", "es-PY", "es-BO", "es-SV", "es-HN", "es-NI", 
	//  "es-PR", "sx", "sv", "sv-FI", "th", "ts", "tn", "tr", "uk", "ur", "ve", "vi", "xh",
	//  "ji", "zu"];
	return (navigator.languages && navigator.languages[0] || navigator.language || navigator.userLanguage || 'es').slice(0, 2);
};
// ================================================

// ================================================
// Cargar archivo .js - ToDo
// ================================================
$BCL.getScript = function(url, success) {
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };

	let script = document.createElement('script');
	script.src = url;
	let head = document.getElementsByTagName('head')[0];
	let done = false;
	script.onload = script.onreadystatechange = function() {
		if(!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {
			done = true;
			success();
			script.onload = script.onreadystatechange = null;
			head.removeChild(script);
		}
	};
	head.appendChild(script);
};


// ================================================
// Cargar archivo .js - ToDo
// ================================================
$BCL.isInteger = function(value) {
	return /^[0-9]{1,}$/.test(value);
};

// ================================================
// Cargar archivo .js - ToDo
// ================================================
$BCL.toNumber = function(value) {
	return Number(value);
};

// ================================================
// Cargar archivo .js - ToDo
// ================================================
$BCL.toBoolean = function(value) {
	return value.toString().toLowerCase() == "true" && value != "0";
};


// ======================================================
// Contenido aleatorio - RTM NOT CHANGE
// ======================================================
$BCL.randText = function(lenght = 8) {
	var str = "";
	var pool = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	for(var i = 0; i < lenght; i++)
		str += pool.charAt(Math.floor(Math.random() * pool.length));
	return str;
};
// ======================================================

// ======================================================
// Contenido aleatorio - RTM NOT CHANGE
// ======================================================

// BP
$BCL.randomNumber = function(min, max) {
	return (Math.floor(Math.pow(10, 14) * Math.random() * Math.random()) % (max - min + 1)) + min;
}

// $BCL.randomNumber
function rollRands(min, max, rolls) {
	let roll = 0,
		n = 0;
	let counts = {};

	for(let i = min; i <= max; i++) {
		counts[i] = 0
	}

	while(roll < rolls) {
		roll++;
		counts[$BCL.randomNumber(min, max)]++;
	}
	return counts;
}

// console.log(rollRands(36, 42, 1000000));


/// Si lo prefieres con números decimales mira esta otro código. 
// Te da un número entre el min y el max (excluyendo llegar al máximo).
// Osea, si pides números entre 1 y 10 en realidad estarías solicitando entre 1 y 9.9999999.
$BCL.randomNumberDec = function(min, max) {
	var num = Math.random() * (max - min);
	return (num + min);
}

// ======================================================

// ======================================================
// Validar que un numero se encuentra entre dos 
// rangos incluyendo ambos limites  - RTM NOT CHANGE
// ======================================================
$BCL.inRange = function(number, min, max) { // RTM
	return (number >= min) && (number <= max);
};

// ======================================================
// Return the number of milliseconds since 01/01/1970
// ======================================================
$BCL.getTics = function() { // OK
	// return (new Date()).getTime();
	return Date.now();
};
// ======================================================

// ================================================
// ToTest
// Gets the current UNIX timestamp
// @returns {Number} Returns an integer with the current UNIX timestamp (in seconds)
// ================================================
$BCL.unixtime = function() { // toTest
	// Date.now() -> Return the number of milliseconds since 1970/01/01
	// El método now devuelve los milisegundos transcurridos desde las 00:00:00 UTC del 1 de enero de 1970 
	// justo hasta ahora como un Number.

	// Cuando se usa now para crear registros temporales or identificadores únicos, 
	// tenga en cuenta que la precisión de Windows puede ser de 15 milisegundos, 
	// lo que puede provocar valores iguales si now se llama múltiples 
	// veces en un breve intervalo de tiempo.

	let oldGoodTimes = new Date(1900, 0, 1); // January = 0
	// you can use: new Date('0001-01-01') (ISO 8601 format)
	let actualDate = new Date();
	return (actualDate.getTime() - oldGoodTimes.getTime()); // 3,801,172,504,290
	// new Date(3801172504290) -- test me
	// return Math.round(Date.now() / 1000);
};
// ================================================


$BCL.isIE = function() { // RTM
	return (/MSIE (\d+\.\d+);/.test(navigator.userAgent));
	// return window.navigator.userAgent.indexOf("MSIE ") > -1 || !!navigator.userAgent.match(/Trident.*rv:11./); // BEST

};

$BCL.getIEversion = function() { // Remove ???
	if($BCL.isIE()) {
		if(navigator.userAgent.match(/Trident.*rv\:11\./)) return 11;

		var isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
		if(isIE10) return 10;

		if(!document.__proto__) return 10;
		if(!window.atob) return 9;
		if(!document.addEventListener) return 8;
		if(!document.querySelector) return 7;
		if(!window.XMLHttpRequest) return 6;

		var ieversion = new Number(RegExp.$1);
		if(ieversion >= 5) return 5;
		return 0;
	}
	return -1; // ToDo
};

$BCL.isEdge = function() { // RTM
	return window.navigator.userAgent.indexOf("Edg") > -1;
};

$BCL.getEdgeVersion = function() { // RTM
	var version = null;
	if(window.navigator.userAgent.indexOf("Edg") > -1) { // $BCL.isEdge()
		var userAgent = navigator.userAgent.toLowerCase();
		var matches = userAgent.match(/edg\/([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/);
		if(matches) {
			version = matches[1];
		}
	}
	return version;
};


$BCL.isChrome = function() { // RTM
	if($BCL.isOpera()) return false;
	return !!window.chrome;
	// return navigator.userAgent.indexOf('Chrome')==-1? 0:1;
};

$BCL.isSafari = function() { //duda
	return window.navigator.userAgent.indexOf("Safari") > -1 && window.navigator.userAgent.indexOf('Chrome') == -1;
	// return navigator.userAgent.indexOf('Safari') == -1 ? false : true;
};

$BCL.isIceweasel = function() {
	return navigator.userAgent.indexOf('Iceweasel') == -1 ? false : true;
};

$BCL.isOpera = function() { // RTM
	let ngOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
	return ngOpera;
};

$BCL.isFirefox = function() { // RTM
	return window.navigator.userAgent.indexOf("Firefox") > -1;
	// return navigator.userAgent.indexOf('Firefox') == -1 ? false : true;
};

$BCL.isBlink = function() {
	return (isChrome || isOpera) && !!window.CSS;
};

$BCL.getBrowserName = function() { // RTM
	if($BCL.isIceweasel()) { return 'iceweasel'; }
	if($BCL.isOpera()) { return "opera"; }
	if($BCL.isFirefox()) { return "firefox"; }
	if($BCL.isSafari()) { return "safari"; }
	if($BCL.isIE()) { return "ie"; }
	if($BCL.isEdge()) { return "edge"; }
	if($BCL.isChrome()) { return "chrome"; }
	if($BCL.isBlink()) { return "blink"; }
	return "unknown";
};

$BCL.getOS = function() {
	if(navigator.appVersion.indexOf("Win") != -1) return "Windows";
	if(navigator.appVersion.indexOf("Mac") != -1) return "MacOS";
	if(navigator.appVersion.indexOf("X11") != -1) return "Unix";
	if(navigator.appVersion.indexOf("Linux") != -1) return "Linux";

	if($BCL.isAndroid()) { return "Android" };
	if($BCL.isIphone()) { return "Iphone" };
	if($BCL.isWindows()) { return "Windows" };
	if($BCL.isFireFoxOS()) { return "FireFoxOS" };
	if($BCL.isLinux()) { return "Linux" };
	if($BCL.isMac()) { return "MacOS" };
	if($BCL.isIpad()) { return "Ipad" };
	if($BCL.isIpod()) { return "Ipod" };

	return "unknown";
};


$BCL.goToAppSource = function() { // ok
	if($BCL.isAndroid()) {
		alert('Android version coming soon.');
		// window.location.href = "http://play.google.com/store/apps/details?id=proiecto";
	}
	if($BCL.isAppleDevice() ||
		$BCL.isIphone() ||
		$BCL.isIpad() ||
		$BCL.isIpod()) {
		alert('IOS version coming soon.');
		// window.location.href = "https://www.apple.com/app-store/";
	}
};

$BCL.isAndroid = function() { // BUG 
	// if(navigator.userAgent.toLowerCase().indexOf("android") > -1){}
	return navigator.userAgent.toLowerCase().indexOf('android') == -1 ? false : true;
};

$BCL.isIpad = function() { // ok
	return (navigator.userAgent.match(/iPad/i) != null);
};

$BCL.isIpod = function() { // ok
	return ((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)))
	// return navigator.userAgent.toLowerCase().indexOf('ipod') == -1 ? false : true;
};

$BCL.isAppleDevice = function() {
	return ((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)))

	// var IS_IPAD = (navigator.userAgent.match(/iPad/i) != null);
	// var IS_IPHONE = !IS_IPAD && ((navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null));
	// var IS_IOS = IS_IPAD || IS_IPHONE;
	// return IS_IOS;
	// return !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
};

$BCL.isIphone = function() { // To test
	return ((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)))
};


$BCL.isWindowsPhone = function() {
	// Obsoleted
	return false;
	// let ua = navigator.userAgent;
	// let ngWindowsPhone = (ua.indexOf("windows phone") != -1); // ua no definido
	// return ngWindowsPhone;
};


$BCL.isFireFoxOS = function() {
	let ua = navigator.userAgent;
	let ngFireFoxOS = $BCL.isFirefox() && (ua.indexOf("mobile") != -1);
	return ngFireFoxOS;
};

$BCL.isWindows = function() { // ok
	return navigator.platform === "Win32" || navigator.platform === "Win64";
};

$BCL.isLinux = function() { // ToDo
	return navigator.platform.indexOf('Linux') > -1 ? true : false;
	// navigator.platform -> Linux x86_64
};

$BCL.isMac = function() { // ok
	return navigator.userAgent.indexOf('Macintosh') == -1 ? false : true;
	// return navigator.platform === "MacIntel" || navigator.platform === "MacPPC";
};

$BCL.isIntel = function() { // ok
	return navigator.platform === "Win32" || navigator.platform === "Win64";
	// return navigator.platform.indexOf('Win') > -1 ? true : false;
};


// ====================================================================
// Saber si es sitio seguro
// ====================================================================
$BCL.isHttps = function() { // PRODUCTION OK

	return (document.location.protocol == 'https:');

	if(location.protocol === 'https:') {
		return true;
	} else {
		return false;
	}

};
// ====================================================================

$BCL.getUrlLocation = function() { // PRODUCTION OK
	return window.location.href;
	// http://proiecto.net/	-> 	http://proiecto.net/"
	// http://demo.proiecto.net/@portal/	-> 	"http://demo.proiecto.net/@portal/"	
};

$BCL.getUrlHostName = function() { // PRODUCTION OK
	return window.location.hostname;
	// http://proiecto.net/	-> 	"proiecto.net"
	// http://demo.proiecto.net/@portal/	-> 	"demo.proiecto.net"
};

// --> /carpeta/index.html
$BCL.getUrlLocalName = function() { // PRODUCTION OK
	return window.location.pathname;
	// http://proiecto.net/	-> 	/
	// http://demo.proiecto.net/@portal/	-> 	"/@portal/"
}

$BCL.getUrlLocation = function() { // PRODUCTION OK
	return document.location.hostname;
	// http://proiecto.net/	-> 	"proiecto.net"
	// http://demo.proiecto.net/@portal/	-> 	"demo.proiecto.net"
};


// ToDo --> http://192.168.42.11:85/@portal/ --> "192"
$BCL.getUrlSubDomain = function() { // PRODUCTION OK
	// return window.location.host.split('.')[1] ? window.location.host.split('.')[0] : false;

	// var host = window.location.host; // "demo.proiecto.net"
	// return host.split('.')[0];
	return window.location.hostname.split(".")[0] // demo
};


// ================================================
// Leer variables desde la url
// ================================================
$BCL.getUrlQueryVariable = function(variable) { // PRODUCTION OK
	// Usage Example URL:
	// http://www.example.com/index.php?id=1&image=awesome.jpg
	// Calling $BCL.getUrlQueryVariable("id")       -> return "1"
	// Calling $BCL.getUrlQueryVariable("image")    -> return "awesome.jpg"
	var query = window.location.search.substring(1);
	var vars = query.split("&");
	for(var i = 0; i < vars.length; i++) {
		var pair = vars[i].split("=");
		if(pair[0] == variable) { return pair[1]; }
	}
	return (false);
};
// ================================================


// ================================================
//  Mostrar un objeto en un alert de JS
// ================================================
// Sample
var myObject = {
	"lunch": "sandwich",
	"dinner": "stirfry"
};
// alert(myObject);

function print_r(obj) {
	return JSON.stringify(obj, null, '\t').replace(/\n/g, '<br>').replace(/\t/g, '&nbsp;&nbsp;&nbsp;');
};

$BCL.alertObj = function(obj, inConsole) { // PRODUCTION OK
	alert(JSON.stringify(obj, null, 4));
	if(inConsole) {
		console.log(JSON.stringify(obj));
	}
}
// ================================================


// ============================================================

// ============================================================
// ToDo Coparar con 
// JS -> sha256('Xpd...'); -> "3bf65ffd9c20e0b2c7f3e66ab9efcc041eb03375b6a56dca2c1dea93a7bd3410"     
// ============================================================
$BCL.sha256 = function(ascii) {
	function rightRotate(value, amount) {
		return (value >>> amount) | (value << (32 - amount));
	};

	var mathPow = Math.pow;
	var maxWord = mathPow(2, 32);
	var lengthProperty = 'length'
	var i, j; // Used as a counter across the whole file
	var result = ''

	var words = [];
	var asciiBitLength = ascii[lengthProperty] * 8;

	//* caching results is optional - remove/add slash from front of this line to toggle
	// Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes
	// (we actually calculate the first 64, but extra values are just ignored)
	var hash = sha256.h = sha256.h || [];
	// Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes
	var k = sha256.k = sha256.k || [];
	var primeCounter = k[lengthProperty];
	/*/
	var hash = [], k = [];
	var primeCounter = 0;
	//*/

	var isComposite = {};
	for(var candidate = 2; primeCounter < 64; candidate++) {
		if(!isComposite[candidate]) {
			for(i = 0; i < 313; i += candidate) {
				isComposite[i] = candidate;
			}
			hash[primeCounter] = (mathPow(candidate, .5) * maxWord) | 0;
			k[primeCounter++] = (mathPow(candidate, 1 / 3) * maxWord) | 0;
		}
	}

	ascii += '\x80' // Append Ƈ' bit (plus zero padding)
	while(ascii[lengthProperty] % 64 - 56) ascii += '\x00' // More zero padding
	for(i = 0; i < ascii[lengthProperty]; i++) {
		j = ascii.charCodeAt(i);
		if(j >> 8) return; // ASCII check: only accept characters in range 0-255
		words[i >> 2] |= j << ((3 - i) % 4) * 8;
	}
	words[words[lengthProperty]] = ((asciiBitLength / maxWord) | 0);
	words[words[lengthProperty]] = (asciiBitLength)

	// process each chunk
	for(j = 0; j < words[lengthProperty];) {
		var w = words.slice(j, j += 16); // The message is expanded into 64 words as part of the iteration
		var oldHash = hash;
		// This is now the undefinedworking hash", often labelled as variables a...g
		// (we have to truncate as well, otherwise extra entries at the end accumulate
		hash = hash.slice(0, 8);

		for(i = 0; i < 64; i++) {
			var i2 = i + j;
			// Expand the message into 64 words
			// Used below if 
			var w15 = w[i - 15],
				w2 = w[i - 2];

			// Iterate
			var a = hash[0],
				e = hash[4];
			var temp1 = hash[7] +
				(rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) // S1
				+
				((e & hash[5]) ^ ((~e) & hash[6])) // ch
				+
				k[i]
				// Expand the message schedule if needed
				+
				(w[i] = (i < 16) ? w[i] : (
					w[i - 16] +
					(rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15 >>> 3)) // s0
					+
					w[i - 7] +
					(rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2 >>> 10)) // s1
				) | 0);
			// This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble
			var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) // S0
				+
				((a & hash[1]) ^ (a & hash[2]) ^ (hash[1] & hash[2])); // maj

			hash = [(temp1 + temp2) | 0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()
			hash[4] = (hash[4] + temp1) | 0;
		}

		for(i = 0; i < 8; i++) {
			hash[i] = (hash[i] + oldHash[i]) | 0;
		}
	}

	for(i = 0; i < 8; i++) {
		for(j = 3; j + 1; j--) {
			var b = (hash[i] >> (j * 8)) & 255;
			result += ((b < 16) ? 0 : '') + b.toString(16);
		}
	}
	return result;
};
// ============================================================



/*
 * Secure Hash Algorithm (SHA512)
 * http://www.happycode.info/
 */
$BCL.sha512 = function(str) {

	function int64(msint_32, lsint_32) {
		this.highOrder = msint_32;
		this.lowOrder = lsint_32;
	}

	var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),
		new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),
		new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),
		new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)
	];

	var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),
		new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),
		new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),
		new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),
		new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),
		new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),
		new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),
		new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),
		new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),
		new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),
		new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),
		new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),
		new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),
		new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),
		new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),
		new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),
		new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),
		new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),
		new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),
		new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),
		new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),
		new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),
		new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),
		new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),
		new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),
		new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),
		new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),
		new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),
		new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),
		new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),
		new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),
		new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),
		new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),
		new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),
		new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),
		new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),
		new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),
		new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),
		new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),
		new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)
	];

	var W = new Array(64);
	var a, b, c, d, e, f, g, h, i, j;
	var T1, T2;
	var charsize = 8;

	function utf8_encode(str) {
		return unescape(encodeURIComponent(str));
	}

	function str2binb(str) {
		var bin = [];
		var mask = (1 << charsize) - 1;
		var len = str.length * charsize;

		for(var i = 0; i < len; i += charsize) {
			bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));
		}

		return bin;
	}

	function binb2hex(binarray) {
		var hex_tab = '0123456789abcdef';
		var str = '';
		var length = binarray.length * 4;
		var srcByte;

		for(var i = 0; i < length; i += 1) {
			srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);
			str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);
		}

		return str;
	}

	function safe_add_2(x, y) {
		var lsw, msw, lowOrder, highOrder;

		lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);
		msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);
		lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

		lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);
		msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);
		highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

		return new int64(highOrder, lowOrder);
	}

	function safe_add_4(a, b, c, d) {
		var lsw, msw, lowOrder, highOrder;

		lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);
		msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);
		lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

		lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);
		msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);
		highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

		return new int64(highOrder, lowOrder);
	}

	function safe_add_5(a, b, c, d, e) {
		var lsw, msw, lowOrder, highOrder;

		lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);
		msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);
		lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

		lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);
		msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);
		highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

		return new int64(highOrder, lowOrder);
	}

	function maj(x, y, z) {
		return new int64(
			(x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),
			(x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)
		);
	}

	function ch(x, y, z) {
		return new int64(
			(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),
			(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)
		);
	}

	function rotr(x, n) {
		if(n <= 32) {
			return new int64(
				(x.highOrder >>> n) | (x.lowOrder << (32 - n)),
				(x.lowOrder >>> n) | (x.highOrder << (32 - n))
			);
		} else {
			return new int64(
				(x.lowOrder >>> n) | (x.highOrder << (32 - n)),
				(x.highOrder >>> n) | (x.lowOrder << (32 - n))
			);
		}
	}

	function sigma0(x) {
		var rotr28 = rotr(x, 28);
		var rotr34 = rotr(x, 34);
		var rotr39 = rotr(x, 39);

		return new int64(
			rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,
			rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder
		);
	}

	function sigma1(x) {
		var rotr14 = rotr(x, 14);
		var rotr18 = rotr(x, 18);
		var rotr41 = rotr(x, 41);

		return new int64(
			rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,
			rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder
		);
	}

	function gamma0(x) {
		var rotr1 = rotr(x, 1),
			rotr8 = rotr(x, 8),
			shr7 = shr(x, 7);

		return new int64(
			rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,
			rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder
		);
	}

	function gamma1(x) {
		var rotr19 = rotr(x, 19);
		var rotr61 = rotr(x, 61);
		var shr6 = shr(x, 6);

		return new int64(
			rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,
			rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder
		);
	}

	function shr(x, n) {
		if(n <= 32) {
			return new int64(
				x.highOrder >>> n,
				x.lowOrder >>> n | (x.highOrder << (32 - n))
			);
		} else {
			return new int64(
				0,
				x.highOrder << (32 - n)
			);
		}
	}

	str = utf8_encode(str);
	strlen = str.length * charsize;
	str = str2binb(str);

	str[strlen >> 5] |= 0x80 << (24 - strlen % 32);
	str[(((strlen + 128) >> 10) << 5) + 31] = strlen;

	for(var i = 0; i < str.length; i += 32) {
		a = H[0];
		b = H[1];
		c = H[2];
		d = H[3];
		e = H[4];
		f = H[5];
		g = H[6];
		h = H[7];

		for(var j = 0; j < 80; j++) {
			if(j < 16) {
				W[j] = new int64(str[j * 2 + i], str[j * 2 + i + 1]);
			} else {
				W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);
			}

			T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);
			T2 = safe_add_2(sigma0(a), maj(a, b, c));
			h = g;
			g = f;
			f = e;
			e = safe_add_2(d, T1);
			d = c;
			c = b;
			b = a;
			a = safe_add_2(T1, T2);
		}

		H[0] = safe_add_2(a, H[0]);
		H[1] = safe_add_2(b, H[1]);
		H[2] = safe_add_2(c, H[2]);
		H[3] = safe_add_2(d, H[3]);
		H[4] = safe_add_2(e, H[4]);
		H[5] = safe_add_2(f, H[5]);
		H[6] = safe_add_2(g, H[6]);
		H[7] = safe_add_2(h, H[7]);
	}

	var binarray = [];
	for(var i = 0; i < H.length; i++) {
		binarray.push(H[i].highOrder);
		binarray.push(H[i].lowOrder);
	}
	return binb2hex(binarray);
}
// ============================================================



// ============================================================
// Compruebe si el número es par/impar
// ============================================================
$BCL.isEven = function(value) {
	if(value % 2 == 0)
		return true;
	else
		return false;
}
// ============================================================

// ============================================================
// Hacer una pausa (en milisegundoa)
// ============================================================
$BCL.wait = function(duration) {
	const date = Date.now();
	let currentDate = null;
	do {
		currentDate = Date.now();
	} while(currentDate - date < duration);
};


// ============================================================
//  - RTM NOT CHANGE
// ============================================================
$BCL.isMobile = function() { // RTM
	let check = false;
	(function(a) { if(/(android|ipad|playbook|silk|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true })(navigator.userAgent || navigator.vendor || window.opera);
	return check;
};
// =======================================================================


// =======================================================================
// Base64 Functions
// =======================================================================

// La función WindowBase64.atob() descodifica una cadena de datos que ha sido codificada utilizando la 
// codificación en base-64. Puedes utilizar el m�todo window.btoa() para codificar y transmitir datos que, 
// de otro modo podr�an generar problemas de comunicación.

// Los esquemas de codificación Base64 son com�nmente usados cuando se necesita codificar datos 
// binarios para que sean almacenados y transferidos sobre un medio dise�ado para tratar con datos textuales. 
// Esto es para asegurar que los datos se mantienen intactos y sin modificaciones durante la transmisi�n. 
// Base64 es com�nmente usado en muchas aplicaciones, incluyendo la escritura de emails v�a MIME y el 
// almacenamiento de datos complejos en XML.

// btoa(): creates a base-64 encoded ASCII string from a "string" of binary data ("btoa" should be read as "binary to ASCII").
// atob(): decodes a base64 encoded string("atob" should be read as "ASCII to binary").

$BCL.EncodeBase64 = function(input) { // RTM

	// When converting object to base64 I was getting out of latin range issues and character invalid error.
	//      var bytes = base64.encode(utf8.encode(JSON.stringify(getOverviewComments())));

	// let encodedData = window.btoa("Hello, world"); // encode a string
	// let decodedData = window.atob(encodedData); // decode the string
	return window.btoa(input);
};
$BCL.DecodeBase64 = function(input) {
	// let encodedData = window.btoa("Hello, world"); // encode a string
	// let decodedData = window.atob(encodedData);    // decode the string
	return window.atob(input);
};
// =======================================================================

/**
 * =======================================================================
 * Calculate the MD5 of a string
 * =======================================================================
 */
function md5(input) { // RTM
	if(!$BCL.$isjQuery()) { throw new Error("BCL requires at least jQuery v2.2.4"); };

	if($BCL.isStringNullOrEmpty(input)) return "";
	let hexcase = 0;
	let b64pad = "";

	function __pj_crypt_hex_md5(s) {
		return __pj_crypt_rstr2hex(__pj_crypt_rstr_md5(__pj_crypt_str2rstr_utf8(s)));
	}

	function __pj_crypt_b64_md5(s) {
		return __pj_crypt_rstr2b64(__pj_crypt_rstr_md5(__pj_crypt_str2rstr_utf8(s)));
	}

	function __pj_crypt_any_md5(s, e) {
		return __pj_crypt_rstr2any(__pj_crypt_rstr_md5(__pj_crypt_str2rstr_utf8(s)), e);
	}

	function __pj_crypt_hex_hmac_md5(k, d) {
		return __pj_crypt_rstr2hex(__pj_crypt_rstr_hmac_md5(__pj_crypt_str2rstr_utf8(k), __pj_crypt_str2rstr_utf8(d)));
	}

	function __pj_crypt_b64_hmac_md5(k, d) {
		return __pj_crypt_rstr2b64(__pj_crypt_rstr_hmac_md5(__pj_crypt_str2rstr_utf8(k), __pj_crypt_str2rstr_utf8(d)));
	}

	function __pj_crypt_any_hmac_md5(k, d, e) {
		return __pj_crypt_rstr2any(__pj_crypt_rstr_hmac_md5(__pj_crypt_str2rstr_utf8(k), __pj_crypt_str2rstr_utf8(d)), e);
	}

	function __pj_crypt_rstr_md5(s) {
		return __pj_crypt_binl2rstr(__pj_crypt_binl_md5(__pj_crypt_rstr2binl(s), s.length * 8));
	}

	function __pj_crypt_rstr_hmac_md5(key, data) {
		let bkey = __pj_crypt_rstr2binl(key);
		if(bkey.length > 16)
			bkey = __pj_crypt_binl_md5(bkey, key.length * 8);

		let ipad = Array(16),
			opad = Array(16);
		for(var i = 0; i < 16; i++) {
			ipad[i] = bkey[i] ^ 0x36363636;
			opad[i] = bkey[i] ^ 0x5C5C5C5C;
		}

		let hash = __pj_crypt_binl_md5(ipad.concat(__pj_crypt_rstr2binl(data)), 512 + data.length * 8);
		return __pj_crypt_binl2rstr(__pj_crypt_binl_md5(opad.concat(hash), 512 + 128));
	}

	function __pj_crypt_rstr2hex(input) {
		let hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
		let output = "";
		let x;
		for(var i = 0; i < input.length; i++) {
			x = input.charCodeAt(i);
			output += hex_tab.charAt((x >>> 4) & 0x0F) +
				hex_tab.charAt(x & 0x0F);
		}
		return output;
	}

	function __pj_crypt_rstr2b64(input) {
		let tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
		let output = "";
		let len = input.length;
		for(var i = 0; i < len; i += 3) {
			let triplet = (input.charCodeAt(i) << 16) |
				(i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) |
				(i + 2 < len ? input.charCodeAt(i + 2) : 0);
			for(var j = 0; j < 4; j++) {
				if(i * 8 + j * 6 > input.length * 8)
					output += b64pad;
				else
					output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
			}
		}
		return output;
	}

	function __pj_crypt_rstr2any(input, encoding) {
		let divisor = encoding.length;
		let i, j, q, x, quotient;
		let dividend = Array(Math.ceil(input.length / 2));
		for(i = 0; i < dividend.length; i++) {
			dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
		}
		let full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));
		let remainders = Array(full_length);
		for(j = 0; j < full_length; j++) {
			quotient = Array();
			x = 0;
			for(i = 0; i < dividend.length; i++) {
				x = (x << 16) + dividend[i];
				q = Math.floor(x / divisor);
				x -= q * divisor;
				if(quotient.length > 0 || q > 0)
					quotient[quotient.length] = q;
			}
			remainders[j] = x;
			dividend = quotient;
		}
		let output = "";
		for(i = remainders.length - 1; i >= 0; i--)
			output += encoding.charAt(remainders[i]);
		return output;
	}

	function __pj_crypt_str2rstr_utf8(input) {
		let output = "";
		let i = -1;
		let x, y;
		while(++i < input.length) {
			x = input.charCodeAt(i);
			y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
			if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {
				x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
				i++;
			}
			if(x <= 0x7F)
				output += String.fromCharCode(x);
			else if(x <= 0x7FF)
				output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F),
					0x80 | (x & 0x3F));
			else if(x <= 0xFFFF)
				output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
					0x80 | ((x >>> 6) & 0x3F),
					0x80 | (x & 0x3F));
			else if(x <= 0x1FFFFF)
				output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
					0x80 | ((x >>> 12) & 0x3F),
					0x80 | ((x >>> 6) & 0x3F),
					0x80 | (x & 0x3F));
		}
		return output;
	}

	function __pj_crypt_str2rstr_utf16le(input) {
		let output = "";
		for(var i = 0; i < input.length; i++)
			output += String.fromCharCode(input.charCodeAt(i) & 0xFF,
				(input.charCodeAt(i) >>> 8) & 0xFF);
		return output;
	}

	function __pj_crypt_str2rstr_utf16be(input) {
		let output = "";
		for(var i = 0; i < input.length; i++)
			output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
				input.charCodeAt(i) & 0xFF);
		return output;
	}

	function __pj_crypt_rstr2binl(input) {
		let output = Array(input.length >> 2);
		for(var i = 0; i < output.length; i++)
			output[i] = 0;
		for(var i = 0; i < input.length * 8; i += 8)
			output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
		return output;
	}

	function __pj_crypt_binl2rstr(input) {
		let output = "";
		for(var i = 0; i < input.length * 32; i += 8)
			output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
		return output;
	}

	function __pj_crypt_binl_md5(x, len) {
		x[len >> 5] |= 0x80 << ((len) % 32);
		x[(((len + 64) >>> 9) << 4) + 14] = len;
		let a = 1732584193;
		let b = -271733879;
		let c = -1732584194;
		let d = 271733878;
		for(var i = 0; i < x.length; i += 16) {
			let olda = a;
			let oldb = b;
			let oldc = c;
			let oldd = d;
			a = __pj_crypt_md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
			d = __pj_crypt_md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
			c = __pj_crypt_md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
			b = __pj_crypt_md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
			a = __pj_crypt_md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
			d = __pj_crypt_md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
			c = __pj_crypt_md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
			b = __pj_crypt_md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
			a = __pj_crypt_md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
			d = __pj_crypt_md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
			c = __pj_crypt_md5_ff(c, d, a, b, x[i + 10], 17, -42063);
			b = __pj_crypt_md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
			a = __pj_crypt_md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
			d = __pj_crypt_md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
			c = __pj_crypt_md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
			b = __pj_crypt_md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
			a = __pj_crypt_md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
			d = __pj_crypt_md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
			c = __pj_crypt_md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
			b = __pj_crypt_md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
			a = __pj_crypt_md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
			d = __pj_crypt_md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
			c = __pj_crypt_md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
			b = __pj_crypt_md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
			a = __pj_crypt_md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
			d = __pj_crypt_md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
			c = __pj_crypt_md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
			b = __pj_crypt_md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
			a = __pj_crypt_md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
			d = __pj_crypt_md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
			c = __pj_crypt_md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
			b = __pj_crypt_md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
			a = __pj_crypt_md5_hh(a, b, c, d, x[i + 5], 4, -378558);
			d = __pj_crypt_md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
			c = __pj_crypt_md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
			b = __pj_crypt_md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
			a = __pj_crypt_md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
			d = __pj_crypt_md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
			c = __pj_crypt_md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
			b = __pj_crypt_md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
			a = __pj_crypt_md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
			d = __pj_crypt_md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
			c = __pj_crypt_md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
			b = __pj_crypt_md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
			a = __pj_crypt_md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
			d = __pj_crypt_md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
			c = __pj_crypt_md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
			b = __pj_crypt_md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
			a = __pj_crypt_md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
			d = __pj_crypt_md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
			c = __pj_crypt_md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
			b = __pj_crypt_md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
			a = __pj_crypt_md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
			d = __pj_crypt_md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
			c = __pj_crypt_md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
			b = __pj_crypt_md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
			a = __pj_crypt_md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
			d = __pj_crypt_md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
			c = __pj_crypt_md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
			b = __pj_crypt_md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
			a = __pj_crypt_md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
			d = __pj_crypt_md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
			c = __pj_crypt_md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
			b = __pj_crypt_md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
			a = __pj_crypt_safe_add(a, olda);
			b = __pj_crypt_safe_add(b, oldb);
			c = __pj_crypt_safe_add(c, oldc);
			d = __pj_crypt_safe_add(d, oldd);
		}
		return Array(a, b, c, d);
	}

	function __pj_crypt_md5_cmn(q, a, b, x, s, t) {
		return __pj_crypt_safe_add(__pj_crypt_bit_rol(__pj_crypt_safe_add(__pj_crypt_safe_add(a, q), __pj_crypt_safe_add(x, t)), s), b);
	}

	function __pj_crypt_md5_ff(a, b, c, d, x, s, t) {
		return __pj_crypt_md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}

	function __pj_crypt_md5_gg(a, b, c, d, x, s, t) {
		return __pj_crypt_md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}

	function __pj_crypt_md5_hh(a, b, c, d, x, s, t) {
		return __pj_crypt_md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}

	function __pj_crypt_md5_ii(a, b, c, d, x, s, t) {
		return __pj_crypt_md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	function __pj_crypt_safe_add(x, y) {
		let lsw = (x & 0xFFFF) + (y & 0xFFFF);
		let msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return (msw << 16) | (lsw & 0xFFFF);
	}

	function __pj_crypt_bit_rol(num, cnt) {
		return (num << cnt) | (num >>> (32 - cnt));
	}
	return __pj_crypt_hex_md5(input);
};
// =======================================================================


// =======================================================================
function Utf8Encode(string) {
	string = string.replace(/\r\n/g, "\n");
	var utftext = "";
	for(var n = 0; n < string.length; n++) {
		var c = string.charCodeAt(n);
		if(c < 128) {
			utftext += String.fromCharCode(c);
		} else if((c > 127) && (c < 2048)) {
			utftext += String.fromCharCode((c >> 6) | 192);
			utftext += String.fromCharCode((c & 63) | 128);
		} else {
			utftext += String.fromCharCode((c >> 12) | 224);
			utftext += String.fromCharCode(((c >> 6) & 63) | 128);
			utftext += String.fromCharCode((c & 63) | 128);
		}
	}
	return utftext;
};

var makeCRCTable = function() {
	var c;
	var crcTable = [];
	for(var n = 0; n < 256; n++) {
		c = n;
		for(var k = 0; k < 8; k++) {
			c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
		}
		crcTable[n] = c;
	}
	return crcTable;
}

function crc32(str) { // Problema con un 0 al principio.
	var crcTable = window.crcTable || (window.crcTable = makeCRCTable());
	var crc = 0 ^ (-1);
	for(var i = 0; i < str.length; i++) {
		crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF];
	}
	// return (crc ^ (-1)) >>> 0; // Number only
	return ((crc ^ (-1)) >>> 0).toString(16); // HEX
};
// =======================================================================


$BCL.fileSize = function(bytes) {
	if(Math.round(bytes / 1024) < 1) return bytes + " Bytes";
	else if(Math.round(bytes / (1024 * 1024)) < 1) return round(bytes / 1024, 2) + " KB";
	else if(Math.round(bytes / (1024 * 1024 * 1024)) < 1) return round(bytes / (1024 * 1024), 2) + " MB";
	else return round(bytes / (1024 * 1024 * 1024), 2) + " GB";
}


$BCL.getFileExtention = function(filename) {
	var tmpname = filename;
	if(tmpname.lastIndexOf(".") != -1)
		return htmlencode(tmpname.substr(tmpname.lastIndexOf(".") + 1).toLowerCase());
	else
		return "";
}


// To Test
$BCL.capitalizeFirstLetter = function(str) {
	return str.charAt(0).toUpperCase() + str.slice(1);
};


$BCL.sameDate = function(date1, date2) {
	return ((date1.getDate() === date2.getDate()) &&
		(date1.getMonth() === date2.getMonth()) &&
		(date1.getFullYear() === date2.getFullYear()));
}

function isString(str) {
	return typeof(str) === typeof('');
}

function isFunction(fnc) {
	return typeof(fnc) === typeof(function() {});
}

function beautify(number, decimalSeparator, thousandsSeparator, precision) {
	number = (number !== null ? '' + number : '');
	number = number.replace(/^0+/, '');
	var outputDecimalSeparator = decimalSeparator ? decimalSeparator : ',';
	var outputThousandsSeparator = thousandsSeparator ? thousandsSeparator : '.';
	var outputPrecision = precision ? precision : 2;

	// Guess decimal separator
	var decimalSepIdx = Math.max(number.lastIndexOf('.'), number.lastIndexOf(','));

	if(number.length > 0) {
		var base = "";
		var decimal = "";

		// Padd the decimal part with enough 0s
		while(decimal.length < outputPrecision) {
			decimal = decimal + "0";
		}

		// Remove unnecesary characters and split base from decimal parts
		if(decimalSepIdx === -1) {
			base = number;
		} else {
			base = number.substr(0, decimalSepIdx).replace(/[\.,]/g, '');
			decimal = (number.substr(decimalSepIdx + 1) + decimal).substr(0, outputPrecision);
		}

		// Format and replace the number
		var mod = base.length > 3 ? base.length % 3 : 0;
		number = (mod ? base.substr(0, mod) + outputThousandsSeparator : "") + base.substr(mod).replace(/(\d{3})(?=\d)/g, "$1" + outputThousandsSeparator) + outputDecimalSeparator + decimal;
	}

	return number;
}

function toNumber(str, precision) {
	var outputPrecision = precision ? precision : 2;

	var value = null;
	if(str && str !== '' && str !== null) {
		// Guess decimal separator
		var decimalSepIdx = Math.max(str.lastIndexOf('.'), str.lastIndexOf(','));

		var base = "0";
		var decimal = "0";

		// Remove unnecesary characters and split base from decimal parts
		if(decimalSepIdx === -1) {
			base = str.replace(/[\.,]/g, '');
		} else {
			base = str.substr(0, decimalSepIdx).replace(/[\.,]/g, '');
			decimal = (str.substr(decimalSepIdx + 1) + decimal).substr(0, outputPrecision);
		}

		var value = parseInt(base, 10) + (parseInt(decimal, 10) / (Math.pow(10, outputPrecision)));
	}

	return value;
}





// ==================================================================
// TRABAJAR CON CLASES CSS
// ==================================================================

/**
 * Agregar clase a un objeto
 * Eliminas las clases existentes
 */
$BCL.setClass = function(elementId, cssClass) { // RTM
	if(!document.getElementById(elementId)) return;
	document.getElementById(elementId).className = cssClass;
}

/**
 * Agregar una clase a un objeto
 * mantiene las clases ya existentes
 */
$BCL.addClass = function(elementId, className) { // To test
	if(!document.getElementById(elementId)) return;
	document.getElementById(elementId).className += ' ' + className;
}

/**
 * Conocer si un objeto tiene una clase
 */
$BCL.hasClass = function(elementId, className) { // To test
	if(!document.getElementById(elementId)) return;
	return document.getElementById(elementId).className.indexOf(className) != -1;
};

/**
 * Remueve TODAS las clases
 */
$BCL.removeAllClass = function(elementId) { // RTM
	if(!document.getElementById(elementId)) return;
	document.getElementById(elementId).className = ''
};

/**
 * Remueve la clase indicada
 */
$BCL.removeClass = function(elementId, className) {
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };
	if(!document.getElementById(elementId)) return false;

	$("#" + elementId).removeClass(className);
};
// ==================================================================

$BCL.decodeHtml = function(html) {
	// $BCL.decodeHtml('<h1>H&oacute;la mundo</h1>')
	// --> <h1>Hola mundo</h1>
	let txt = document.createElement("textarea");
	txt.innerHTML = html;
	return txt.value;
};

$BCL.encodeHtml = function(html) { // ToDo
};

$BCL.isInArray = function(value, array) {
	return array.indexOf(value) > -1;
};

// Ir al topoe de la pagina
// Requiere jQuery
$BCL.scrollToTop = function() {
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };

	verticalOffset = typeof(verticalOffset) != 'undefined' ? verticalOffset : 0;
	element = $('html');
	offset = element.offset();
	offsetTop = offset.top;
	$('html, body').animate({
		scrollTop: offsetTop
	}, 300, 'linear');
};

// =============================================================
// Preload Pictures
// $BCL.preloadImages("hoverimage1.jpg","hoverimage2.jpg", ...);
// $BCL.preloadImages("/assets/images/masthead1.jpg");
// =============================================================
$BCL.preloadImages = function() {
	for(var i = 0; i < arguments.length; i++) {
		$("<img />").attr("src", arguments[i]);
	}
}
// =============================================================






$BCL.setInputValue = function(element, value) {
	element.hasChanged = false;
	element.originalValue = value;
	switch (element.type) {
		case "hidden":
		case "text":
		case "textarea":
		case "select-one":
		case "button":
			element.value = value;
			break;
		case "checkbox":
			element.checked = value != "0";
			element.value = value;
			break;
		case "radio":
			element.checked = value != "0";
			element.value = value;
			break;
			break;
		case "select-multiple":
			for(var i = 0; i < element.length; i++) {
				if(trim(element[i].value) == trim(value)) {
					element[i].selected = true;
				}
			}
			break;
		default:
			throw "element not input";
			break;
	}
};

$BCL.getInputValue = function(element) {
	switch (element.type) {
		case "hidden":
		case "text":
		case "textarea":
		case "checkbox":
		case "radio":
		case "select-one":
			return trim(element.value);
		case "select-multiple":
			let values = [];
			for(var i = 0; i < element.length; i++) {
				if(element[i].selected) {
					values.push(trim(element[i].value));
				}
			}
			return values;
	}
};



// Determina si existe un arhivo a nivel de 
// servidor desde el front end, no del backend
$BCL.fileExists = function(url) { // PRODUCTION OK
	try {
		let req = new XMLHttpRequest();
		req.open('GET', url, false);
		req.send();
		return req.status == 200;
	} catch (e) {
		return false;
	}
};

// <input id="myFile" type="file" name="file">
// <button onclick='var x = $BCL.inputGetFileExtension("myFile")'>Get Extension</button>
$BCL.inputGetFileExtension = function(inputElement) { // To Test
	//Get the file input element by its id 
	var fileInput = document.getElementById(inputElement);
	//Get the file name
	var fileName = fileInput.files[0].name;

	// Regular expression for file extension.
	var patternFileExtension = /\.([0-9a-z]+)(?:[\?#]|$)/i;

	// Get the file Extension 
	var fileExtension = (fileName).match(patternFileExtension);
	return fileExtension;
};


// Regresa la extension de un archivo
$BCL.getFileExtension = function(filename) { // RTM
	let parts = filename.split('.');
	return parts[parts.length - 1];
}

// Regresa el nombre de un archivo
$BCL.getFileName = function(fileName) { // RTM
	let parts = fileName.split('.');
	return parts[0];
}





$BCL.isStringNullOrEmpty = function(val) { // RTM
	if(typeof val === "undefined" || !val.length) {
		return true;
	}
	if(val.trim() === "") {
		return true;
	}
	switch (typeof val) {
		case 'undefined':
			return true;
		case 'string':
			return (val == '');
		case 'integer':
			return (val == 0);
		case 'object':
			if(!val) return true;
			if(val.length > 0) return false;
			for(var i in val)
				return false;
			return true;
		case 'boolean':
			return (!val);
	}
	return false;
};

/**
 * Ir a una url
 * Para ir a un dominio externo, indicar siempre: http://www...
 * All javascript context is unloaded and lost when the browser navigates to another page.
 * Use localStorage, sessionStorage or cookies depending on your need.
 */
$BCL.redirect = function(pageUrl, inBlank) { // RTM
	if(inBlank) {
		window.open(pageUrl);
	} else {
		// Para evitar recargar la pagina actual....
		if(window.location.href.toLowerCase().indexOf(pageUrl.toLowerCase()) < 0) {
			// document.location.href = pageUrl;
			// similar behavior as an HTTP redirect
			// window.location.replace("http://stackoverflow.com");
			// similar behavior as clicking on a link
			// window.location.href = pageUrl;
			document.location.href = pageUrl;
		}
	}
};

// Ancho de la pantalla (Viewport)
$BCL.getViewportWidth = function() { // RTM
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };
	// return (document.body.clientWidth + document.body.scrollLeft);
	return $(window).width();
};

// Alto de la pantalla (Viewport)
$BCL.getViewportHeight = function() { // RTM
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };
	// return (document.body.clientHeight + document.body.scrollTop);
	return $(window).height();
};

$BCL.getWidth = function(element) { // RTM
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };
	return $('#' + element).width();
};

$BCL.getHeight = function(element) { // RTM
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };
	return $('#' + element).height();
};

// 
$BCL.setHeight = function(elementId, height) {
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };
	// $('#' + elementId).height(height);
	$('#' + elementId).css("height", height);
};

$BCL.setWidth = function(elementId, width) {
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };
	// $('#' + elementId).width(height);
	$('#' + elementId).css("width", width);
};

// ============================================================
// $(selector).fadeOut(speed,easing,callback)
// $(selector).fadeOut(1200,'swing',callback)
// $(selector).fadeOut(function () {
//      code
// });
// speed = milliseconds, 'slow' & 'fast'
//      $("html").fadeOut(1200); // Oculta
//      $("html").fadeIn('slow'); // Mostrar
// ============================================================
$BCL.hideElement = function(elementId) { // RTM
	// if(!$isjQuery){console.error("jQuery => 2.2.4 is required.");return false;};

	if(!document.getElementById(elementId)) return;
	$("#" + elementId).hide().fadeOut('slow');

	// let element = document.getElementById(elementId);
	// element.style.display = 'none'; // Oculta un elemento. Quita el espacio ocupado por el objeto
	// element.style.visibility = 'hidden';
	// La diferencia de usar el atributo display o el atributo visibility, 
	// es que este último (visibility) reserva el espacio en la página, 
	// aun si el div está oculto, mientras que el primero (display) 
	// no (el efecto visual de esto es que la página se expande o se colapsa).
};

$BCL.showElement = function(elementId) { // RTM
	if(!document.getElementById(elementId)) return;
	$("#" + elementId).hide().fadeIn('slow');
	// let element = document.getElementById(elementId);
	// element.style.display = 'block';
};

// Oculta un arreglo de elementos
// Quita el espacio ocupado por los objetos
// let aElements = new Array('elemento1', 'elemento2', 'elemento3', 'elemento4');
// $BCL.hideElements(aElements)
$BCL.hideElements = function(elements) { // RTM
	let i, l = elements.length;
	for(i = 0; i < l; i++) {
		$BCL.hideElement(elements[i]);
	}
};

// Muestra un arreglo de elementos que esta oculto
// let aElements = new Array('elemento1', 'elemento2', 'elemento3', 'elemento4');
// $BCL.hideElements(aElements)
$BCL.showElements = function(elements) { // RTM
	let i, l = elements.length;
	for(i = 0; i < l; i++) {
		$BCL.showElement(elements[i]);
	}
};

// Centra un objeto dentro de su contenedor verticalmente
$BCL.objectVerticalAlign = function(elem) {
	if(elem) {
		elem.css({
			'marginTop': -elem.height() / 2
		}).fadeIn();
	}
};


// Redondea un numero decimal a x decimales
// $BCL.getRoundDecimal(3.1415927, 2); // --> 3.14
$BCL.roundDecimal = function(iNum, iDec) { // ok
	return Math.round(iNum * Math.pow(10, iDec)) / Math.pow(10, iDec);
};

// ============================================================
// Trabajar con cookies - RTM NOT CHANGE
// ============================================================
// Saber si el navegador soporta cookies
$BCL.isCookie = function() {
	return navigator.cookieEnabled;
}

// ============================================================
//  - RTM NOT CHANGE
// ============================================================
// ToDO. buscar la forma que al pasar exdays = 0 la cooquie sea valida solo
// para la sesion actual
$BCL.setCookie = function(name, value, days) {
	let d = new Date;
	d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * days);
	document.cookie = name + "=" + value + ";path=/;expires=" + d.toGMTString();
};

// ============================================================
//  - RTM NOT CHANGE
// ============================================================
$BCL.getCookie = function(name) {
	let v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
	return v ? v[2] : null;
}

// ============================================================
//  - RTM NOT CHANGE
// ============================================================
$BCL.deleteCookie = function(name) {
	setCookie(name, '', -1);
}

// ============================================================
// Limpiar todas las cookies existentes - RTM NOT CHANGE
// NOTA: Las funciones para trabajar con cookies 
// no funciona en modo local --> file:///
// ============================================================
$BCL.deleteCookieAll = function() { // RTM
	document.cookie.split(";").forEach(function(c) {
		document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
	});
	// for all domains
	let cookies = document.cookie.split("; ");
	for(var c = 0; c < cookies.length; c++) {
		let d = window.location.hostname.split(".");
		while(d.length > 0) {
			let cookieBase = encodeURIComponent(cookies[c].split(";")[0].split("=")[0]) + '=; expires=Thu, 01-Jan-1970 00:00:01 GMT; domain=' + d.join('.') + ' ;path=';
			let p = location.pathname.split('/');
			document.cookie = cookieBase + '/';
			while(p.length > 0) {
				document.cookie = cookieBase + p.join('/');
				p.pop();
			};
			d.shift();
		}
	}
};

// ============================================================
//  - RTM NOT CHANGE
// ============================================================
$BCL.checkCookie = function(cname) {
	let username = $BCL.getCookie(cname);
	if(username != "") {
		return true;
	} else {
		return false;
	}
};
// ============================================================



$BCL.ToBoolean = function(str) {
	const string = (typeof str === 'string') ? str.toLowerCase().trim() : str
	switch (string) {
		case "true":
		case "yes":
		case "1":
			return true
		case "false":
		case "no":
		case "0":
		case null:
			return false
		default:
			return Boolean(string)
	}
	// Usage
	// $BCL.ToBoolean('true') // true
	// $BCL.ToBoolean('TRUE') // true
	// $BCL.ToBoolean('yes') // true
	// $BCL.ToBoolean('1') // true
	// $BCL.ToBoolean(true) // true
	// $BCL.ToBoolean('false') // false
	// $BCL.ToBoolean('FALSE') // false
	// $BCL.ToBoolean('no') // false
	// $BCL.ToBoolean('0') // false
	// $BCL.ToBoolean(false) // false
	// $BCL.ToBoolean(null) // false
};


// let monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
// let dayOfWeekNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

/**
 * A�ade ceros a la izquierda del valor recibido para 
 * cubrir la cantidad de caracteres ocupados
 */
$BCL.addCeroBase10 = function(num) {
	return num < 10 ? "0" + num : num;
};

$BCL.addCeroBase100 = function(n) { // Test
	if(n < 10) { return "0" + $BCL.addCeroBase10(n); }
	return n < 100 ? "0" + n : n
};

$BCL.addCeroBase1000 = function(n) { // Test
	if(n < 100) { return "0" + $BCL.addCeroBase100(n); }
	return n < 1000 ? "0" + n : n
};

// Capturar los parametros pasados por la url
// http://example.com/?product=shirt&color=blue&newuser&size=m

// USO:
// $BCL.getAllUrlParams().product; // 'shirt'
// $BCL.AllUrlParams().color; // 'blue'
// $BCL.getAllUrlParams().newuser; // true
// $BCL.getAllUrlParams().nonexistent; // undefined
// $BCL.getAllUrlParams('http://test.com/?a=abc').a; // 'abc'
$BCL.getAllUrlParams = function(url) {

	// get query string from url (optional) or window
	let queryString = url ? url.split('?')[1] : window.location.search.slice(1);

	// we'll store the parameters here
	let obj = {};

	// if query string exists
	if(queryString) {

		// stuff after # is not part of query string, so get rid of it
		queryString = queryString.split('#')[0];

		// split our query string into its component parts
		let arr = queryString.split('&');

		for(var i = 0; i < arr.length; i++) {
			// separate the keys and the values
			let a = arr[i].split('=');

			// set parameter name and value (use 'true' if empty)
			let paramName = a[0];
			let paramValue = typeof(a[1]) === 'undefined' ? true : a[1];

			// (optional) keep case consistent
			paramName = paramName.toLowerCase();
			if(typeof paramValue === 'string') paramValue = paramValue.toLowerCase();

			// if the paramName ends with square brackets, e.g. colors[] or colors[2]
			if(paramName.match(/\[(\d+)?\]$/)) {

				// create key if it doesn't exist
				let key = paramName.replace(/\[(\d+)?\]/, '');
				if(!obj[key]) obj[key] = [];

				// if it's an indexed array e.g. colors[2]
				if(paramName.match(/\[\d+\]$/)) {
					// get the index value and add the entry at the appropriate position
					let index = /\[(\d+)\]/.exec(paramName)[1];
					obj[key][index] = paramValue;
				} else {
					// otherwise add the value to the end of the array
					obj[key].push(paramValue);
				}
			} else {
				// we're dealing with a string
				if(!obj[paramName]) {
					// if it doesn't exist, create property
					obj[paramName] = paramValue;
				} else if(obj[paramName] && typeof obj[paramName] === 'string') {
					// if property does exist and it's a string, convert it to an array
					obj[paramName] = [obj[paramName]];
					obj[paramName].push(paramValue);
				} else {
					// otherwise add the property
					obj[paramName].push(paramValue);
				}
			}
		}
	}
	return obj;
};





// permite leer archivos JSON
// The correct method - create a new XMLHttpRequest
// The clue here is the jQuery method $.getJSON() which is shorthand for $.ajax(). 
// It may seem an odd approach requesting a local file in this way but 
// it offers the most flexibility with minimum fuss.
// $BCL.loadJsonFile("/core/lang/es.json")
$BCL.loadJsonFile = function(url) {
	let xhr = new XMLHttpRequest();
	xhr.overrideMimeType("application/json");
	// Failed to execute 'open' on 'XMLHttpRequest': Synchronous requests must not set a timeout.
	// xhr.timeout = 7000; 
	xhr.ontimeout = function() {
		console.error("The request for [" + url + "] is time out.");
	};

	// ============================================
	// `false` makes the request synchronous
	// Nota: No deberias usar XMLHttpRequests síncronas porque, dada la naturaleza 
	// inherentemente asíncrona del intercambio de datos en las redes, hay multiples 
	// formas en que la memoria y eventos se puedan perder usando solicitudes síncronas.
	xhr.open('GET', url, false); // Retardo por AJAX sincrónico
	// xhr.open('GET', url, true);
	// ============================================
	xhr.onreadystatechange = function() {
		// ============================================
		// if (xhr.readyState == 4 && xhr.status == 200) {
		// Required use of an anonymous callback as .open will NOT 
		// return a value but simply returns undefined in asynchronous mode
		// callback(xhr.responseText);

		// console.table(xhr);
		// console.info(xhr.response);
		// console.info(xhr.responseText);
		// }
		// ============================================
	};
	// xhr.onerror = function(error){};
	xhr.send(null);
	if(xhr.status != 200) return '';
	// console.info(xhr.responseText);
	// return xhr.responseText; // Return a string
	return JSON.parse(xhr.responseText); // Return a JSON Object
};



$BCL.isValidEmail = function(val) { // 
	let email = /^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
	return email.test(val);
};





// ================================== END RTM =====================================

// ToDo: que use el ws para enviarlo
// services.proiecto.net
/*
    let sendmail = require('sendmail')({ silent: true })

    sendmail({
      from: 'whoever@site.com',
      to: 'your-email@awesome.com',
      replyTo: 'whoever@site.com',
      subject: 'MailComposer sendmail',
      html: 'Mail of test sendmail '
    }, function (err, reply) {
      console.log(err && err.stack)
      console.dir(reply)
    })


// =============================================

*/





















































/**
 * Hora remota del servidor
 */
$BCL.getRemoteDateTime = function() { // RTM
	let xhr = new XMLHttpRequest();
	xhr.overrideMimeType("application/json");
	// xhr.timeout = 3000; // Synchronous requests must not set a timeout.
	xhr.ontimeout = function() {
		console.error("$BCL.getRemoteDateTime() => The request for [" + url + "] timed out.");
	};
	xhr.open('HEAD', window.location.href.toString(), false);
	xhr.setRequestHeader("Content-Type", "text/html");
	xhr.send(null);

	let d = new Date(xhr.getResponseHeader('Date'));
	return d;
};




// ============================== capturar parametros de la url ============================== //
// Obtener todos los parametros pasados en un arreglo
// This is how you can pick a value from the variable array.
// let number = $BCL.getUrlQueryString()["x"];
// let mytext = $BCL.getUrlQueryString()["text"];
// ============================== capturar parametros de la url ============================== //
$BCL.getUrlQueryString = function() {
	let vars = {};
	// let vars = new Array{}; // Da error al compilar....
	let parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m, key, value) {
		vars[key] = value;
	});
	// Si no hay parametros
	// regresa: {}
	//
	// http://portal.proiecto.net/@portal/?q=0000-0000-0000&sec=11453345&e=edward.ocando@gmail.com
	// RESULTADO: $BCL.getUrlQueryString()   = --> {q: "0000-0000-0000", sec: "11453345", e: "edward.ocando@gmail.com"}
	// console.log($BCL.getUrlQueryString().q) --> '0000-0000-0000'
	return vars;
};


$BCL.getUrlQueryStringsParameterCount = function() {
	// ToDo: Terminar
	return 1234567890;
};
// ============================== capturar parametros de la url ============================== //


// Sets the focus on an input.
$BCL.setInputFocus = function(input) {
	// Remove and add the text again.
	input.focus();
	let inputVal = input.val();
	input.val('');
	input.val(inputVal);
};


// Generates a unique id.
$BCL.generateUUID = function() {
	let d = new Date().getTime();
	let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
		let r = (d + Math.random() * 16) % 16 | 0;
		d = Math.floor(d / 16);
		return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
	});
	return uuid;
};


/**
 * Hora local del cliente
 */
$BCL.getLocalDateTime = function() { // PRODUCTION OK
	return new Date();
};



/**
TRABAJAR CON FECHAS
*/

/**
* Regresa objeto fecha en JSON
*   let fecha = new Date()
*   $BCL.dateToJson(fecha)
"       --> new Date(2018,4,1,12,38,43,303)" // yyyy,mm,dd,hh,mm,ss,ms
* Recordar que en laas fecha ENE = 0, FEB = 1, MAR = 2, ABR = 3, MAY = 4, ...
*/
$BCL.dateToJson = function(date) { // ToDo: mejorar json de salida
	let result = [
		date.getFullYear(),
		date.getMonth() + 1, // Recordar que en laas fecha ENE = 0, FEB = 1, MAR = 2, ABR = 3, MAY = 4, ...
		date.getDate()
	];
	let time = {
		h: date.getHours(),
		m: date.getMinutes(),
		s: date.getSeconds(),
		ms: date.getMilliseconds()
	};

	if(time.h || time.m || time.s || time.ms)
		result.push(time.h);
	if(time.m || time.s || time.ms)
		result.push(time.m);
	if(time.s || time.ms)
		result.push(time.s);
	if(time.ms)
		result.push(time.ms);

	// ToDo: Mejorar el JSON de salida
	// [2019, 6, 11, 22, 0, 12, 292]

	return result;
};



$BCL.secondsElapsedFromDates = function(d1, d0) { // ToDo: probar 
	if(!d0) { d0 = $BCL.getRemoteDateTime(); }
	let date1 = new Date(d1),
		date0 = new Date(d0);
	let diff = date0.getTime() - date1.getTime(); // milliseconds
	return Math.floor(diff / 1000);
};

// ok
$BCL.getYear = function() { // RTM
	return $BCL.getRemoteDateTime().getFullYear();
};

// ok
$BCL.getMonth = function() { // RTM
	return $BCL.getRemoteDateTime().getMonth() + 1; // Recordar que en laas fecha ENE = 0, FEB = 1, MAR = 2, ABR = 3, MAY = 4, ...
};

// ok
$BCL.getMonthDay = function() { // RTM
	return $BCL.getRemoteDateTime().getDate();
};

// ok
$BCL.getMonthStr = function() { // RTM
	let m = $BCL.getRemoteDateTime();
	if($BCL.getNavigatorLanguage() === "es") {
		return $BCL.monthsEs[m.getMonth()];
	} else {
		return $BCL.monthsEn[m.getMonth()];
	}
};

// ok
// lun = 1
$BCL.getWeekDay = function() {
	return $BCL.getRemoteDateTime().getDay();
};

// ok
$BCL.getWeekDayStr = function() {
	let d = $BCL.getRemoteDateTime();
	if($BCL.getNavigatorLanguage() === "es") {
		return $BCL.daysEs[d.getDay() - 1];
	} else {
		return $BCL.daysEn[d.getDay() - 1];
	}
};


// ok
// $BCL.getDaysInMonth(2, 2020) = 28
// $BCL.getDaysInMonth() = 30, 31 28 o 29
$BCL.getDaysInMonth = function(iMonth, iYear) { // RTM
	// Regresa la cantidad de dias del mes indicado.
	if(!iMonth) { let iMonth = $BCL.getMonth(); }
	if(!iYear) { let iYear = $BCL.getYear(); }

	if(0 < iMonth && 13 > iMonth && 0 < iYear) {
		return new Date(iYear, iMonth, 0).getDate();
	}
	return -1;
};

/**
 * Calcular edad
 * $BCL.getAgeFromMDY("10/20/1971") // --> mm/dd/yyyy
 */
$BCL.getAgeFromMDY = function(dateStringMDY) { // OK
	let today = new Date();
	let birthDate = new Date(dateStringMDY); // fecha america mm/dd/yyyy 
	let age = today.getFullYear() - birthDate.getFullYear();
	let m = today.getMonth() - birthDate.getMonth();
	if(m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
		age--;
	}
	return age;
};

// ok
$BCL.getCurDateAsString = function() {
	let mydate = new Date($BCL.getRemoteDateTime());
	let year = mydate.getYear();
	if(year < 1000)
		year += 1900;
	let day = mydate.getDay();
	let month = mydate.getMonth();
	let daym = mydate.getDate();
	if(daym < 10) daym = '0' + daym;
	if($BCL.getNavigatorLanguage() === "es") {
		return $BCL.daysEs[day - 1] + ' ' + daym + ' de ' + $BCL.monthsEs[month] + ' del ' + year;
	}
	return $BCL.daysEn[day - 1] + ' ' + daym + ' of ' + $BCL.monthsEn[month] + ' of ' + year;
};

/**
 * Es año bisiesto..?
 */
$BCL.isLeapYear = function(intYear) { // ok
	if(!intYear) { let intYear = $BCL.getYear(); }

	if(intYear % 100 == 0) {
		if(intYear % 400 == 0) {
			return true;
		}
	} else {
		if((intYear % 4) == 0) {
			return true;
		}
	}
	return false;
};

/**
 * Util para la conversion de fechas
 * if userLanguage = true        --> "17/05/2018" or "17-05-2018"
 * if userLanguage = false o none --> "2018/05/17" or "2018-05-17"
 */
$BCL.getDate = function(separator, userLanguage) { // ToDo Probar
	if(!separator) { let separator = "/"; }

	if(!userLanguage) {
		if($BCL.getNavigatorLanguage() === "es") {
			return $BCL.addCeroBase10($BCL.getMonthDay()) + separator + $BCL.addCeroBase10($BCL.getMonth()) + separator + $BCL.getYear();
		} else {
			// Todo: yyyy/mm/dd o mm/dd/yyyy
			return $BCL.getYear() + separator + $BCL.addCeroBase10($BCL.getMonth()) + separator + $BCL.addCeroBase10($BCL.getMonthDay());
		}
	};
	if(userLanguage.toLowerCase() === "es") {
		return $BCL.addCeroBase10($BCL.getMonthDay()) + separator + $BCL.addCeroBase10($BCL.getMonth()) + separator + $BCL.getYear();
	} else {
		// Todo: yyyy/mm/dd o mm/dd/yyyy
		return $BCL.getYear() + separator + $BCL.addCeroBase10($BCL.getMonth()) + separator + $BCL.addCeroBase10($BCL.getMonthDay());
	}
};



$BCL.$isjQueryVersion = function() {
	if(!$isjQuery) { throw new Error("$BCL requires at least jQuery v2.2.4"); };
	if($BCL.$isjQuery()) {
		return $().jquery;
	}
	return "-1";
};

$BCL.isInteger = function(value) {
	if(/^(\+|-)?\d+$/.test(value)) {
		return true;
	} else {
		return false;
	}
}

$BCL.isPlusInteger = function(value) {
	if(isInteger(value) && parseInt(value) >= 0) {
		return true;
	} else {
		return false;
	}
}

$BCL.isFloat = function(value) {
	if(/^(\+|-)?\d+($|\.\d+$)/.test(value)) {
		return true;
	} else {
		return false;
	}
}

// ToTest
$BCL.isNumberOrCharacter = function(val) {
	for(var i = 0; i < val.length; i++) {
		let ch = val.charAt(i);
		if(!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9'))) {
			return false;
		}
	}
	return true;
}


$BCL.isHexaDigit = function(digit) {
	let hexVals = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
		"A", "B", "C", "D", "E", "F", "a", "b", "c", "d", "e", "f");
	let len = hexVals.length;
	let i = 0;
	let ret = false;
	for(i = 0; i < len; i++)
		if(digit == hexVals[i]) break;
	if(i < len)
		ret = true;
	return ret;
}

// ToDo: Agregar mas y mejores validaciones
$BCL.isSecurePassword = function(pwd) {
	if(pwd == null) { return false; }
	if(pwd == 1234567890) { return false; }
	if(pwd == '0123456789') { return false; }
	if(pwd.length < 8) { return false; }

	return true;
}







$BCL.isHex = function(val) { // RTM: Mejorar. Que pase por alto espacios en blancos internos
	let re = /^[a-fA-F0-9]+$/;
	return re.test(val);
};


// document.body.style.background = $BCL.randomColor();
// object.style.backgroundColor = "color|transparent|initial|inherit"
// document.getElementById("myDiv").style.backgroundColor = "lightblue";
$BCL.randomColor = function() {
	// get red
	let r = $BCL.getRandomNumber(0, 255).toString(16);
	if(r.length < 2) r = "0" + r;

	// get green
	let g = $BCL.getRandomNumber(0, 255).toString(16);
	if(g.length < 2) g = "0" + g;

	// get blue
	let b = $BCL.getRandomNumber(0, 255).toString(16);
	if(b.length < 2) b = "0" + b;

	return "#" + r + g + b;
}

$BCL.isAlphaNumeric = function(val) { // RTM
	val = val.replace(/^\s+|\s+$/g, ""); // Trim
	let re = /^[a-zA-Z0-9_-]+$/;
	return re.test(val);
};

$BCL.isLocalStorage = function() {
	// test if localStorage is available.
	let str = 'Edberlith & Enizabeth';
	try {
		localStorage.setItem('ee', str);
		localStorage.removeItem('ee');
		return true;
	} catch (e) {
		return false;
	}
}


$BCL.isSessionStorage = function() {
	let str = 'Edberlith & Enizabeth';
	try {
		sessionStorage.setItem('ee', str);
		sessionStorage.removeItem('ee');
		return true;
	} catch (e) {
		return false;
	}
}


/**
 * Generar un GUID
 */
$BCL.createGuid = function() { // RTM
	function s4() {
		return Math.floor((1 + Math.random()) * 0x10000)
			.toString(16)
			.substring(1)
			.toUpperCase();
	}
	return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
};





/**
 * Mostrar el dialogo de imprimir pagina actual
 */
$BCL.showPrintDialog = function() { // RTM
	if(typeof(window.print) !== 'undefined') {
		window.print();
	}
};

/**
 * Refrescar pagina actual
 */
$BCL.pageRefresh = function() { // RTM
	window.location.reload(true);
	//console.clear();
};


/**
 * Mostrar una url en un PopUp
 * $BCL.showPopup("http://www.soydesarrollador.net",300, 400, 100, 20)
 * $BCL.showPopup("http://www.soydesarrollador.net",300, 400, 100, "center")
 * $BCL.showPopup("/ayuda/default.html", 500, 600, 100, "center");
 * Nota: Firefox no respeta las dimensiones de la venatana
 */
$BCL.showPopup = function(url, ancho, alto, top, left) { // Probar y ver cual es mejor
	if(left === "center") {
		let ancho_navegador = (document.body.clientWidth);
		ancho_navegador = ancho_navegador / 2;
		let ancho_emergente = ancho / 2;
		let left = ancho_navegador - ancho_emergente;
		let w = window.open("" + url + "", "v", "fullscreen=no resizable=yes width=" + ancho + "px height=" + alto + "px top=" + top + " left=" + left + "");
	};
};





$BCL.getFormatedBytes = function(bytes, subDecimals, pointChar) { // ok
	// Formatear valores de bytes en cadena en: 'B', 'KB', 'MB', 'GB', 'TB', 'PB'
	// $BCL.getFormatedBytes (123456789,2,",") // --> "117,74 MB"
	// $BCL.getFormatedBytes ($BCL.getRandomNumber(),2,",")
	if(!subDecimals) {
		let subDecimals = 0;
	}
	if(!pointChar) {
		let pointChar = '.';
	}
	let units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
	for(var i = 0; bytes > 1024 && i < units.length; i++) {
		bytes /= 1024;
	}
	let factor = Math.pow(10, subDecimals);
	bytes = Math.round(bytes * factor) / factor;
	bytes = bytes.toString().split('.').join(pointChar);
	return bytes + ' ' + units[i];
};


// $BCL.getNumberFormated($BCL.getRandomNumber(), 3, ".", ",")
// $BCL.getNumberFormated($BCL.getRandomNumber(), 3, ".", ",","antes","despues")
$BCL.getNumberFormated = function(number, decimals, dec_point, thousands_sep, prefix, sufix) { // RTM
	// Formatea un numero
	prefix = prefix || '';
	sufix = sufix || '';
	let n = !isFinite(+number) ? 0 : +number,
		prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
		sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
		dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
		toFixedFix = function(n, prec) {
			// Fix for IE parseFloat(0.55).toFixed(0) = 0;
			let k = Math.pow(10, prec);
			return Math.round(n * k) / k;
		},
		s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');
	if(s[0].length > 3) {
		s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
	}
	if((s[1] || '').length < prec) {
		s[1] = s[1] || '';
		s[1] += new Array(prec - s[1].length + 1).join('0');
	}
	return prefix + s.join(dec) + sufix;
};

// Estraer solo los numeros de una cadena
// $BCL.extractNumbers("3.14")
// $BCL.extractNumbers("V11453345d")
$BCL.extractNumbers = function(num) { // ok
	return num.replace(/([^0-9\.\-])/g, '') * 1;
};

// Regresa una cadena invertida
$BCL.getReverseString = function(str) { // ok
	let result = "";
	for(var i = str.length - 1; i > -1; --i) {
		result += str.charAt(i);
	}
	return result;
};

// Saber si una cadena contiene a otra. 
// Distingue mayuscula y minusculas
$BCL.isStringContains = function(str, s) { // ok
	return (str.indexOf(s) != -1);
};

// Regresa SOLO la primera letra en mayuscula de una frase
$BCL.stringToProper = function(str) { // ok
	str = str.toLowerCase();
	return str.charAt(0).toUpperCase() + str.slice(1);
};

// $BCL.stringToCamel('variable-nombre') -> "variableNombre"
$BCL.stringToCamel = function(str) { // ok
	return str.replace(/(\-[a-z])/g, function($1) {
		return $1.toUpperCase().replace('-', '');
	});
};

$BCL.getArrayNumSort = function(arrayNum) { // RTM
	// Ordenar array numerico
	// let tmp = [5,9,12,18,56,1,10,42,30,7,97,53,33,35,27,1];
	// tmp = tmp.sortNum(); // devuelve 1,5,7,9,10,12,18,27,30,33,35,42,53,56,97
	return arrayNum.sort(function(a, b) {
		return a - b;
	});
};

$BCL.isValidIP4 = function(address) {
	let i = 0;
	if(address == '0.0.0.0' ||
		address == '255.255.255.255')
		return false;
	let addrParts = address.split('.');
	if(addrParts.length != 4)
		return false;
	for(i = 0; i < 4; i++) {
		if(isNaN(addrParts[i]) || addrParts[i] == "" ||
			addrParts[i].charAt(0) == '+' || addrParts[i].charAt(0) == '-' ||
			(addrParts[i].charAt(0) == '0' && addrParts[i].length > 1))
			return false;
		if(addrParts[i].length > 3 || addrParts[i].length < 1) {
			return false;
		}
		if(!isInteger(addrParts[i]) || addrParts[i] < 0) {
			return false;
		}
		num = parseInt(addrParts[i]);
		if(i == 0 && num == 0) {
			return false;
		}
		if(num < 0 || num > 255)
			return false;
		if((3 == i) && (255 == num)) {
			return false;
		}
	}
	return true;
}

$BCL.isLoopIpAddress = function(address) {
	if(isValidIP4(address) == false) {
		return false;
	}
	let addrParts = address.split('.');
	if(addrParts[0] == '127') {
		return true;
	}
	return false;
}

$BCL.isValidPort = function(port) {
	if(!isInteger(port) || port < 1 || port > 65535) {
		return false;
	}
	return true;
}

$BCL.isValidMacAddress = function(address) {
	let c = '';
	let i = 0,
		j = 0;
	if(address.toLowerCase() == 'ff:ff:ff:ff:ff:ff' || address.toLowerCase() == '00:00:00:00:00:00') {
		return false;
	}
	addrParts = address.split(':');
	if(addrParts.length != 6) return false;
	for(i = 0; i < 6; i++) {
		if(addrParts[i] == '')
			return false;
		if(addrParts[i].length != 2) {
			return false;
		}
		if(addrParts[i].length != 2) {
			return false;
		}
		for(j = 0; j < addrParts[i].length; j++) {
			c = addrParts[i].toLowerCase().charAt(j);
			if((c >= '0' && c <= '9') ||
				(c >= 'a' && c <= 'f'))
				continue;
			else
				return false;
		}
	}
	return true;
}



// ==================================================================
// Trabajar con Objetos
// ==================================================================
$BCL.disableElement = function(elementId) { // RTM
	if(!document.getElementById(elementId)) return;
	document.getElementById(elementId).disabled = true;
};

$BCL.enableElement = function(elementId) { // RTM
	if(!document.getElementById(elementId)) return;
	document.getElementById(elementId).disabled = false;
};

$BCL.disableALL = function(divContainer) { // RTM 
	// Desactiva todos los elementos hijos de un DIV contenedor
	if(!document.getElementById(divContainer)) return;
	let nodes = document.getElementById(divContainer).getElementsByTagName('*');
	for(var i = 0; i < nodes.length; i++) {
		nodes[i].disabled = true;
	}
};

$BCL.enableALL = function(divContainer) { // RTM 
	// Activa todos los elementos hijos de un DIV contenedor
	if(!document.getElementById(divContainer)) return;
	let nodes = document.getElementById(divContainer).getElementsByTagName('*');
	for(var i = 0; i < nodes.length; i++) {
		nodes[i].disabled = false;
	}
};


// ==================================================================
// gracias a Jehova ***


$BCL.colorizeTable = function(tableId, clase1, clase2, clase3) { // RTM
	// ToDo: Mejorar para que ilumine la fila donde esta el mouse (clase3)
	// Colorizar filas de tabla
	// recibe el nombre de las tres clase a aplicar
	if(!document.getElementById(tableId)) return;

	let objTrSet = document.getElementById(tableId).getElementsByTagName("tr");
	let j = 0;
	let clasName;
	for(var i = 0; i < objTrSet.length; i++) {
		if(objTrSet[i].style.display != "none") {
			j++;
			if(j % 2 == 1) {
				clasName = clase1;
			} else {
				clasName = clase2;
			}
			objTrSet[i].setAttribute("class", clasName);
			objTrSet[i].setAttribute("className", clasName);
		}
	}
};



/**
 * For form inputs
 */
$BCL.getCheckBoxValue = function(checkBoxId) { // RTM
	if(!document.getElementById(checkBoxId)) return;
	return document.getElementById(checkBoxId).checked;
};

$BCL.setCheckBoxValue = function(checkBoxId, trueOrFalse) { // RTM
	if(!document.getElementById(checkBoxId)) return;
	document.getElementById(checkBoxId).checked = trueOrFalse;
};












/*
function multiplicar(a, b) {
    b = typeof b !== 'undefined' ? b : 1; // IMPORTANTE
    if (arguments.length === 0) {}
    return a * b;
}
*/

/**
 * =====================================================================================================
 * prototypes
 * =====================================================================================================
 */
String.prototype.trim = function() {
	return this.replace(/^\s+|\s+$/g, '');
}

String.prototype.rtrim = function() {
	return this.replace(/\s+$/, "");
}

String.prototype.ltrim = function() {
	return this.replace(/^\s+/, "");
}

String.prototype.toProperCase = function() {
	return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
};

/**
 * Convierte una frase en arreglo, palabra por palabra
 *  el separador es un espacio en blanco
 */
String.prototype.toArray = function() {
	return this.split('');
};


/**
 Saber si un string contiene a otro
 Es sensible a MAYUSC/minusc
 "edward".contains("war"); --> true
 "edward".contains("wAr"); --> false
*/
String.prototype.contains = function(searchString) {
	if(this.indexOf(searchString) >= 0) {
		return true;
	}
	return false;
};

// For checking if a string is blank or contains only white-space:
String.prototype.isEmpty = function() {
	return (this.length === 0 || !this.trim());
};

/**
 * Arrays
 */
Array.prototype.clear = function() {
	this.length = 0;
}

Array.prototype.sum = function() {
	let length = this.length,
		result = 0;

	while(length--) {
		result += +this[length] || 0;
	}
	return result;
}

Array.prototype.max = function() {
	return Math.max.apply(Math, this);
}

Array.prototype.min = function() {
	return Math.min.apply(Math, this);
}

/**
 * Fechas
 */
Date.prototype.addDays = function(days) {
	let dat = new Date(this.valueOf());
	dat.setDate(dat.getDate() + days);
	return dat;
}

Date.prototype.getMonthDays = function(month) {
	let year = this.getFullYear();
	if(typeof month == "undefined") {
		month = this.getMonth();
	}
	if(((0 == (year % 4)) && ((0 != (year % 100)) || (0 == (year % 400)))) && month == 1) {
		return 29;
	} else {
		return Date._MD[month];
	}
};

Date.prototype.getDayOfYear = function() {
	let now = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
	let then = new Date(this.getFullYear(), 0, 0, 0, 0, 0);
	let time = now - then;
	return Math.floor(time / Date.DAY);
};

Date.prototype.getWeekNumber = function() {
	let d = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
	let DoW = d.getDay();
	d.setDate(d.getDate() - (DoW + 6) % 7 + 3);
	let ms = d.valueOf();
	d.setMonth(0);
	d.setDate(4);
	return Math.round((ms - d.valueOf()) / (7 * 864e5)) + 1;
};

Date.prototype.equalsTo = function(date) {
	return (
		(this.getFullYear() == date.getFullYear()) &&
		(this.getMonth() == date.getMonth()) &&
		(this.getDate() == date.getDate()) && // Return the day of the month
		(this.getHours() == date.getHours()) &&
		(this.getMinutes() == date.getMinutes()) &&
		(this.getSeconds() == date.getSeconds())
	)
};



// For checking if a string is empty, null or undefined I use:
function isEmpty(str) {
	return (!str || 0 === str.length);
}

// For checking if a string is blank, null or undefined I use:
function isBlank(str) {
	return (!str || /^\s*$/.test(str));
}



function isFunction(it) {
	return ostring.call(it) === '[object Function]';
}

function isArray(it) {
	return ostring.call(it) === '[object Array]';
}

function hasProp(obj, prop) {
	return hasOwn.call(obj, prop);
}
